<?xml version="1.0" encoding="UTF-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>r.va.gg</title>
 
  <link href="https://r.va.gg" />
  <updated>2017-08-25T01:21:29.807Z</updated>
  <id>https://r.va.gg/</id>
  <author>
    <name>Rod Vagg</name>
  </author>
  <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="https://r.va.gg/feed.xml" />

  
    <entry>
      <title>The Truth About Rod Vagg</title>
      <link href="https://r.va.gg/2017/08/the-truth-about-rod-vagg.html" />
      <updated>2017-08-25T00:00:00.000Z</updated>
      <id>https://r.va.gg/2017/08/the-truth-about-rod-vagg.html</id>
      <content type="html">
        &lt;p&gt;&lt;em&gt;NOTE: This post is copied from &lt;a href=&quot;https://github.com/nodejs/CTC/issues/165#issuecomment-324798494&quot;&gt;https://github.com/nodejs/CTC/issues/165#issuecomment-324798494&lt;/a&gt; and the primary intended audience was the Node.js CTC.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Dear reader from &lt;code&gt;${externalSource}&lt;/code&gt;: I neither like nor support personal abuse or attacks. If you are showing up here getting angry at any party involved, I would ask you to refrain from targeting them, privately or in public. Specifically to people who think they may be supporting me by engaging in abusive behaviour: I do not appreciate, want or need it, in any form and it is not helpful in any way.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yep, this is a long post, but no apologies for the length this time. Buckle up.&lt;/p&gt;
&lt;p&gt;I&#39;m sad that we have reached this point, and that the CTC is being asked to make such a difficult decision. One of the reasons that we initially split the TSC into two groups was to insulate the technical &lt;em&gt;doers&lt;/em&gt; on the CTC from the overhead of administrative and political tedium. I know many of you never imagined you&#39;d have to deal with something like this when you agreed to join and that this is a very uncomfortable experience for you.&lt;/p&gt;
&lt;p&gt;It&#39;s obvious that we never figured out a suitable structure that made the TSC a useful, functional, and healthy body that might be able to deal more effectively with these kinds of problems, more isolated from the CTC. I&#39;m willing to accept a sizeable share of the blame for not improving our organisational structure during my tenure in leadership.&lt;/p&gt;
&lt;h2 id=&quot;my-response&quot;&gt;My response&lt;/h2&gt;
&lt;p&gt;Regarding the request for me to resign from the CTC: in lieu of clear justification that my removal is for the benefit of the Node.js project, or a case for my removal that is not built primarily on hearsay and innuendo, I respectfully decline.&lt;/p&gt;
&lt;p&gt;There are two primary reasons for which I am standing my ground.&lt;/p&gt;
&lt;p&gt;I cannot, in good conscience, give credence to the straw-man version of me being touted loudly on social media and on GitHub. This caricature of me and vague notions regarding my &quot;toxicity&quot;, my propensity for &quot;harassment&quot;, the &quot;systematic&quot; breaking of rules and other slanderous claims against my character has no basis in fact. I will not dignify these attacks by taking tacit responsibility through voluntary resignation.&lt;/p&gt;
&lt;p&gt;Secondly, and arguably more importantly for the CTC: I absolutely will not take responsibility for the precedent that is currently being set. The dogged pursuit  of a leader of this project, the strong-arm tactics being deployed with the goal of having me voluntarily resign, or my eventual removal from this organisation are not the behavior of a healthy, productive, or inclusive community. &lt;/p&gt;
&lt;p&gt;My primary concern is that the consequences of these actions endanger the future health of the Node.js project. I do not believe that I am an irreplaceable snowflake (I’m entirely replaceable). There is reason to pause before making this an acceptable part of how we conduct our governance and our internal relationships.&lt;/p&gt;
&lt;p&gt;However, while I am not happy to have the burden of this decision being foisted upon all of you, I am content with standing to be judged by this group. As the creative force behind Node.js and the legitimate owners of this project, my respect for you as individuals and as a group and your rightful position as final arbiters of the technical Node.js project makes entirely comfortable living with whatever decision you arrive at regarding my removal.&lt;/p&gt;
&lt;p&gt;I will break the rest of this post into the following sections: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My critique of the process so far&lt;/li&gt;
&lt;li&gt;My response to list of complaints made against me &lt;a href=&quot;https://github.com/nodejs/TSC/issues/310&quot;&gt;to the TSC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Addressing the claims often repeated across the internet regarding me as a hinderance to progress on inclusivity and diversity&lt;/li&gt;
&lt;li&gt;The independence of the technical group, the new threats posed to that independence&lt;/li&gt;
&lt;li&gt;The threats posed to future leadership of the project&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-process-so-far&quot;&gt;The process so far&lt;/h3&gt;
&lt;p&gt;My personal experience so far has been approximately as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some time ago I received notification via email that there are complaints against me. No details were provided and I was informed that I would neither receive those details or be involved in the whatever process was to take place. Further, TSC members were not allowed to speak to me directly about these matters, &lt;em&gt;including&lt;/em&gt; my work colleagues also on the TSC. I was never provided with an opportunity to understand the specific charges against me or be involved in any discussions on this topic from that point onward.&lt;/li&gt;
&lt;li&gt;3 days ago, I saw &lt;a href=&quot;https://github.com/nodejs/TSC/issues/310&quot;&gt;nodejs/TSC#310&lt;/a&gt; at the same time as the public. &lt;strong&gt;This was the first time that I had seen the list of complaints&lt;/strong&gt;. It was the first that I heard that there was a vote taking place regarding my position.&lt;/li&gt;
&lt;li&gt;At no point have I been provided with an opportunity to answer to these complaints, correct the factual errors contained in them (see below), apologise and make amends where possible, or provide additional context that may further explain accusations against me.&lt;/li&gt;
&lt;li&gt;At no point have I been approached by a member of the TSC or CTC regarding any of these items other than what the record that we have here on GitHub shows—primarily in the threads involved and in the moderation repository, the record is open for you to view regarding the due diligence undertaken either by my accusers or those executing the process. I have had interactions with only a single member of the TSC regarding one of these matters in private email and in person which has, on both occasions, involved me attempting to coax out the source of bad feelings that I had sensed and attempting to (relatively blindly) make amends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you can empathise that to me this process is rather unfair and regardless of whether this process is informed or dictated by our governance documents as has been claimed, it should be changed so that in the future accused parties have the chance to at least respond to accusations.&lt;/p&gt;
&lt;h3 id=&quot;response-to-the-list-of-complaints&quot;&gt;Response to the list of complaints&lt;/h3&gt;
&lt;p&gt;I am including the text that was redacted from &lt;a href=&quot;https://github.com/nodejs/TSC/issues/310&quot;&gt;nodejs/TSC#310&lt;/a&gt; as it is already in the public domain, on social media, also on GitHub and now in the press. Please note that I did not ask for this text to be redacted.&lt;/p&gt;
&lt;h4 id=&quot;1-&quot;&gt;1.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In [link to moderation repository discussion, not copied here out of respect for additional parties involved], Rod’s first action was to apologize to a contributor who had been repeatedly moderated. Rod did not discuss the issue with other members of the CTC/TSC first. The result undermined the moderation process as it was occurring. It also undercut the authority as moderators of other CTC/TSC members.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rather than delving into the details of this complaint, I will simply say that I was unaware at the time that the actions I had taken were inappropriate and had caused hurt to some CTC/TSC members involved in this matter. Having had this belatedly explained to me (again, something I have had to coax out, not offered freely to me), I issued a private statement to the TSC and CTC via email at the beginning of this month offering my sincere apologies. (I did this without knowing whether it was part of the list of complaints against me.) The most relevant part of my private statement is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In relation to my behaviour in the specific: I should not have weighed in so heavily, or at all, in this instance as I lacked so much of the context of what was obviously a very sensitive matter that was being already dealt with by some of you (in a very taxing way, as I understand it). I missed those signals entirely and weighed in without tact, took sides against some of you—apologising to [unnecessary details withheld] on behalf of some of you was an absurd thing for me to do without having being properly involved prior to this. And for this I unreservedly apologise!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&#39;t know if this apology was acknowledged during the process of dealing with the complaints against me. This apology has neither been acknowledged in the publication of the complaints handling process, nor has it seemed to have any impact on the parties involved who continue to hold it against me. I can only assume that they either dismiss my sincerity or that apologies are not a sufficient means of rectifying these kinds of missteps.&lt;/p&gt;
&lt;p&gt;In this matter I accept responsibility and have already attempted to make amends and prevent a similar issue from recurring. It disappoints me that it is still used as an active smear against me. Again, had I been given clear feedback regarding my misstep earlier, I would have attempted to resolve this situation sooner. &lt;/p&gt;
&lt;h4 id=&quot;2-&quot;&gt;2.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In nodejs/board#58 and nodejs/moderation#82 Rod did not moderate himself when asked by another foundation director and told them he would take it to the board. He also ignored the explicit requests to not name member companies and later did not moderate the names out of his comments when requested. Another TSC member needed to follow up later to actually clean up the comments. Additionally he discussed private information from the moderation repo in the public thread, which is explicitly against the moderation policy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My response to this complaint is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This thread unfortunately involves a significant amount of background corporate politics, personal relationship difficulties and other matters which conspired to raise the temperature, for me at least. This is not an excuse, simply an explanation for what may have appeared to some to be a heated interjection on my part.&lt;/li&gt;
&lt;li&gt;I &lt;em&gt;did&lt;/em&gt; edit my post very soon after—I was the first to edit my posts in there after the quick discussion that followed in the moderation repository and I realised I had made a poor judgement call with my choice of words. I both removed my reading of intent into the words of another poster and removed the disclosure of matters discussed in a private forum.&lt;/li&gt;
&lt;li&gt;I do not recall being asked to &lt;em&gt;remove&lt;/em&gt; the names of the companies involved, I have only now seen that they have been edited out of my post. I cannot find any evidence that such a request was even made. This would have been a trivial matter on my part and I would have done it without argument if I had have seen such a request. To find this forming the basis of a complaint is rather troubling without additional evidence.&lt;/li&gt;
&lt;li&gt;A board member asking another board member (me) to edit their postings seemed to me to be a board matter, hence my suggestion to take it to the board. I was subsequently corrected on this—as it is a TSC-owned repository it was therefore referred to the TSC for adjudication.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I considered the remaining specifics of this issue to have been resolved and have not been informed otherwise since this event took place. Yet I now find that the matters are still active and I am the target of criticism rather than that criticism being aimed at the processes that apparently resolved the matter in the first place. Why was I never informed that my part in the resolution was unsatisfactory and why was I not provided a chance to rectify additional perceived misdeeds?&lt;/p&gt;
&lt;h3 id=&quot;3-&quot;&gt;3.&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Most recently Rod tweeted in support of an inflammatory anti-Code-of-Conduct article. As a perceived leader in the project, it can be difficult for outsiders to separate Rod’s opinions from that of the project. Knowing the space he is participating in and the values of our community, Rod should have predicted the kind of response this tweet received. &lt;a href=&quot;https://twitter.com/rvagg/status/887652116524707841&quot;&gt;https://twitter.com/rvagg/status/887652116524707841&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;His tweeting of screen captures of immature responses suggests pleasure at having upset members of the JavaScript community and others. As a perceived leader, such behavior reflects poorly on the project. &lt;a href=&quot;https://twitter.com/rvagg/status/887790865766268928&quot;&gt;https://twitter.com/rvagg/status/887790865766268928&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rod’s public comments on these sorts of issues is a reason for some to avoid project participation. &lt;a href=&quot;https://twitter.com/captainsafia/status/887782785221615618&quot;&gt;https://twitter.com/captainsafia/status/887782785221615618&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is evidence to others that Node.js may not be serious about its commitment to community and inclusivity. &lt;a href=&quot;https://twitter.com/nodebotanist/status/887724138516951049&quot;&gt;https://twitter.com/nodebotanist/status/887724138516951049&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The post I linked to was absolutely &lt;strong&gt;not&lt;/strong&gt; an anti-Code-of-Conduct article. It was an article written by an Associate Professor of Evolutionary Psychology at the University of New Mexico, discussing free speech in general and suggesting a case against speech codes &lt;em&gt;in American university campuses&lt;/em&gt;. In sharing this, I hoped to encourage meaningful discussion regarding the possible shortcomings of some standard Code of Conduct language. My intent was not to suggest that the Node.js project should not have a Code of Conduct in place.&lt;/li&gt;
&lt;li&gt;&quot;Rod should have predicted the kind of response this tweet received&quot; is a deeply normative statement. I did not predict the storm generated, and assumed that open discussion on matters of speech policing was still possible, and that my personal views would not be misconstrued as the views of the broader Node.js leadership group or community. I obviously chose the wrong forum. If TSC/CTC members are going to be held responsible for attempting to share or discuss personal views on personal channels, then that level of accountability should be applied equally across technical and Foundation leadership.&lt;/li&gt;
&lt;li&gt;&quot;His tweeting of screen captures of immature responses suggests pleasure&quot; is an assumption of my feelings at the time. I find this ironic especially in the context of complaint number 2 (above); I was criticised for reading the intention of another individual into their words yet that’s precisely what is being done here. This claim is absolutely untrue, I do not take pleasure in upsetting people. I will refrain from justifying my actions further on this matter but this accusation is baseless and disingenuous.&lt;/li&gt;
&lt;li&gt;To re-state for further clarity, I &lt;strong&gt;have not made a case against Codes of Conduct in general&lt;/strong&gt;, but rather, would like to see ongoing discussion about how such social guidelines could be improved upon, as they clearly have impact on open source project health.&lt;/li&gt;
&lt;li&gt;I have never made a case against the Node.js Code of Conduct.&lt;/li&gt;
&lt;li&gt;I have a clear voting record for adopting the Node.js project&#39;s Code of Conduct and for various changes made to it. Codes of Conduct have been adopted by a number of my own projects which have been moved from my own GitHub account to that of the Node.js Foundation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will refrain from further justifying a tweet. As with all of you, I bring my own set of opinions and values to our diverse mix and we work to find an acceptable common space for us all to operate within. I don’t ask that you agree with me, but within reason I hope that mutual respect is stronger than a single disagreement. I cannot accept that my opinions on these matters form a valid reason for my removal. I have submitted myself to our Code of Conduct as a participant in this project. I have been involved in the application of our Code of Conduct. But I do not accept it as a sacred text that is above critique or even &lt;em&gt;discussion&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While not a matter for the TSC or CTC, a Board member on the Foundation who (by their own admission), has repeatedly discussed sensitive and private Board matters publicly on Twitter, causing ongoing consternation and legal concern for the Board. As far as I know, this individual has not been asked to resign. I consider this type of behaviour to be considerably more problematic for the Foundation than my tweeting of a link to an article completely unrelated to Node.js.&lt;/p&gt;
&lt;p&gt;Taking action against me on the basis of this tweet, while ignoring the many tweets and other social media posts that stand in direct conflict to the goals of the Foundation by other members of our technical team, its leadership and other members of the Foundation and its various bodies, strikes me as a deeply unequal (and, it must be said, un-inclusive) application of the rules. &lt;/p&gt;
&lt;p&gt;If it is the case that the TSC/CTC is setting limits on personal discussion held outside the context of the project repo, then these limits should be applied to all members of both groups without prejudice.&lt;/p&gt;
&lt;h4 id=&quot;board-accusations&quot;&gt;Board accusations&lt;/h4&gt;
&lt;p&gt;In addition to the above list, we now have &lt;a href=&quot;https://github.com/nodejs/board/issues/67&quot;&gt;new claims&lt;/a&gt; from the Node.js Foundation board. It appears to suggest that I have and/or do engage in &lt;em&gt;“antagonistic, aggressive or derogatory behavior”&lt;/em&gt;, with no supporting evidence provided. Presumably the supporting evidence is the list in &lt;a href=&quot;https://github.com/nodejs/TSC/issues/310&quot;&gt;nodejs/TSC#310&lt;/a&gt; to which I have responded with above.&lt;/p&gt;
&lt;p&gt;I can’t respond to an unsupported claim such as this, it’s presented entirely without merit and I cannot consider it anything other than malicious, self-serving, and an obvious attempt to emotionally manipulate the TSC and CTC by charging the existing claims with a completely new level of seriousness by the sprinkling of an assortment of stigmatic &lt;em&gt;evil person&lt;/em&gt; descriptors.&lt;/p&gt;
&lt;p&gt;To say that I am disappointed that a majority of the Board would agree to conduct themselves in such an unprofessional and immature manner is an understatement. However this is neither the time nor place for me to attempt to address their attempts to smear, defame and &lt;em&gt;unperson&lt;/em&gt; me. After requesting of me directly that I “fall on my sword” and not receiving the answer it wanted, the Board has chosen to make it clear to where it collectively thinks the high moral ground is in this matter. As I have already expressed to them, I believe they have made a poor assessment of the facts, and have not made the correct choice on their moral stance, and have now stood by and encouraged additional smears against me.&lt;/p&gt;
&lt;p&gt;I will have more to say on the Board’s role and our relationship to it below, however.&lt;/p&gt;
&lt;h3 id=&quot;that-i-am-a-barrier-to-inclusivity-efforts&quot;&gt;That I am a barrier to inclusivity efforts&lt;/h3&gt;
&lt;p&gt;This is a refrain that is often repeated on social media about me and it&#39;s never been made clear, to me at least, how this is justified.&lt;/p&gt;
&lt;p&gt;By most objective measures, the Node.js project has been healthier and more open to outsiders during my 2-year tenure in leadership than at any time in its history. One of the great pleasures I&#39;ve had during this time has been in showing and celebrating this on the conference circuit. We have record numbers of contributors overall, per month overall and unique per month. Our issue tracker is so busy with activity that very few of us can stay subscribed to the firehose any more. We span the globe such that our core and working group meetings are very difficult to schedule and usually have to end up leaving people out. We regularly have to work to overcome language and cultural barriers as we continue to expand.&lt;/p&gt;
&lt;p&gt;When I survey the contributor base, the collaborator list, the CTC membership, I see true diversity across many dimensions. Claims that I am a barrier to inclusivity and the building of a diverse contributor base are at odds with the prominent role I&#39;ve had in the project during its explosive growth.&lt;/p&gt;
&lt;p&gt;My assessment of the claim that I am a hindrance to inclusivity efforts is that it hinges on the singular matter of moderation and control of discourse that occurs amongst the technical team. From the beginning I have strongly maintained that the technical team should retain authority over its own space. That its independence also involves its ability to enforce the rules of social interaction and discussion as it sees fit. This has lead to disagreements with individuals that would rather insert external arbiters into the moderation process; arbiters who have not earned the right to stand in judgement of technical team members, and have not been held to the same standards  by which technical team members are judged to earn their place in the project.&lt;/p&gt;
&lt;p&gt;On this matter I remain staunchly opposed to the dilution of independence of the technical team and will continue to advocate for its ability to make such critical decisions for itself. This is not only a question of moral (earned) authority, but of the risk of subversion of our organisational structures by individuals who are attracted to the project by the possibility of pursuing a personal agenda, regardless of  the impact this has on the project itself. I see current moves in this direction, as in this week’s moderation policy proposal at &lt;a href=&quot;https://github.com/nodejs/TSC/pull/276&quot;&gt;nodejs/TSC#276&lt;/a&gt;, as presenting such a risk. I don&#39;t expect everyone to agree with me on this, but I have just as much right as everyone else to make my case and not be vilified in my attempts to convince enough of the TSC to prevent such changes.&lt;/p&gt;
&lt;p&gt;Further, regarding other smears against my character that now circulate regularly on social media and GitHub. I would ask that if you are using any of these as the basis of your judgement against me, please ask for supporting evidence of those making or repeating such smears. It&#39;s been an educational experience to watch a caricatured narrative about my character grow into the monster that it is today, and it saddens me when people I respect take this narrative at face value without bothering to scratch the surface to see if there is any basis in fact.&lt;/p&gt;
&lt;p&gt;The use of language such as “systematic” and “pattern” to avoid having to outline specifics should be seen for what they are: baseless smears. I have a large body of text involving many hundreds of social interactions scattered through the Node.js project and its various repositories on GitHub. If any such “systematic” behavioural problems exist then it should not be difficult to provide clear documentation of them.&lt;/p&gt;
&lt;h3 id=&quot;threats-to-the-independence-of-the-technical-group&quot;&gt;Threats to the independence of the technical group&lt;/h3&gt;
&lt;p&gt;We now face the unprecedented move by the Node.js Foundation Board to &lt;a href=&quot;https://github.com/nodejs/board/issues/67&quot;&gt;inject itself&lt;/a&gt; directly in our decision-making process. The message being: the TSC voted the wrong way, they should do it again until you get the “right” outcome. &lt;/p&gt;
&lt;p&gt;This echoes the sentiment being &lt;a href=&quot;https://github.com/nodejs/community-committee/issues/111&quot;&gt;expressed in the Community Committee&lt;/a&gt; and elsewhere, that since there were accusations, there must be guilt and the fault lies in the inability of the TSC to deal with that guilt. With no credence paid to the possibility that &lt;em&gt;perhaps&lt;/em&gt; the TSC evaluated the facts and reached a consensus that no further action was necessary.  &lt;/p&gt;
&lt;p&gt;I have some sympathy for the position of the Node.js Foundation board. These are tough times in the Silicon Valley environment, particularly with the existing concerns surrounding diversity, inclusivity, and tolerance. I can understand how &lt;em&gt;rumors&lt;/em&gt; of similarly unacceptable behavior can pose a threat, even absent any evidence of such behavior. That said, I do not believe that it is in the long-term interests of Node.js or its Foundation to pander to angry mobs, as they represent a small fraction of our stakeholders and their demands are rarely rational. In this case, I believe that a majority of outsiders will be viewing this situation with bemusement at best. It saddens me that there is no recognition of the fact that  appeasing angry and unverified demands by activists only leads to greater demands and less logical discussion of these issues. If we accept this precedent then we place the future health of this project in jeopardy, as we will have demonstrated that we allow outsiders to adjust our course to suit personal or private agendas, as long as they can concoct a story to create outrage and dispense mob justice without reproach.&lt;/p&gt;
&lt;p&gt;While difficult, I believe that it is important for the technical team to continue to assert its independence, to the board and to other outside influences. We are not children who need adult supervision; treating us as such undermines so much of what we have built over these last few years and erodes the feelings of ownership of the project that we have instilled in our team of collaborators.&lt;/p&gt;
&lt;h3 id=&quot;the-threat-to-future-leadership-of-the-project&quot;&gt;The threat to future leadership of the project&lt;/h3&gt;
&lt;p&gt;Finally, I want to address a critical problem which has been overlooked,  but now poses a big problem for our future: how to grow, enable and support leadership in such a difficult environment.&lt;/p&gt;
&lt;p&gt;My tenure in leadership easily represents the most difficult years of my life. The challenges I have had to face have forced me to grow in ways I never expected. I&#39;m thankful for the chance to meet these challenges, however, and even though it&#39;s taken a toll on my health, I&#39;ll be glad to have had the experience when I look back.&lt;/p&gt;
&lt;p&gt;One of my tasks as a leader, particularly serving in the role of bridge between the Board and the technical team, has involved maintaining that separation and independence but also shielding the technical team from the intense corporate and personal politics that constantly exists and is being exercised within, and around the Foundation. This role forced me to take strong positions on many issues and to stand up to pressure applied from many different directions. In doing what I felt was best to support my technical team members I’m sure I’ve  put people off-side—that&#39;s an unfortunate consequence of good intentions, but not an uncommon one.  I wouldn&#39;t say I&#39;ve made enemies so much as had to engage in &lt;em&gt;very&lt;/em&gt; difficult conversations and involve myself  in the surfacing of many disagreements that are difficult and sometimes impossible to resolve.&lt;/p&gt;
&lt;p&gt;Having to involve yourself in a wide variety of decision-making processes inevitably requires that you make tough calls or connect yourself in some way to controversial discussions. I&#39;m sure our current leadership can attest to the awkward positions they have found themselves in, and the difficult conversations they have had to navigate, including this one!&lt;/p&gt;
&lt;p&gt;I&#39;ll never pretend I don&#39;t have limitations in the skills, both intellectually and emotionally, required to navigate through these tough waters. But when I consider the sheer number of dramas, controversies, and difficult conversations I&#39;ve had to be involved in—and when I consider the thousands of pages of text I have left littered across GitHub and the other forums we use to get things done—I come to this conclusion: If the best reason you can find force my resignation is the above list of infractions, &lt;strong&gt;given the weight of content you could dredge through, then you&#39;re either not trying very hard or I should be pretty proud of myself for keeping a more level head than I had imagined&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That aside, my greatest concern for the role of leadership coming as a consequence of the actions currently being pursued, is that we&#39;ve painted ourselves into a corner regarding the leaders we&#39;re going to have available. The message that the Board has chosen to send today can be rightly interpreted as this: if the mob comes calling, if the narrative of evil is strong enough, regardless of the objective facts, the Foundation does not have your back. As developers and leaders, the Foundation is signalling that they will not stand up for us when things get tough. Combine this with a difficult and thankless job, where the result of exercising your duties could be career-killing, the only path forward for leadership is that we will likely only have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Individuals who are comfortable giving in to the whims of the outside activists, whatever the demands, slowly transforming this project into something entirely different and focused on matters not associated with making Node.js a success&lt;/li&gt;
&lt;li&gt;Individuals who are capable but shrewd enough to avoid responsibility&lt;/li&gt;
&lt;li&gt;Individuals who are capable and take on responsibility, exercise backbone when standing against pressure groups and mob tactics but get taken down because the support structures either abandon them or turn against them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This kind of pattern is being evidenced across the professionalised open source sphere, with Node.js about to set a new low bar. Do not be surprised as quality leaders become more difficult to find or become unconvinced that the exercise of leadership duties is at all in their personal interest.&lt;/p&gt;
&lt;p&gt;This is a great challenge for modern open source and I&#39;m so sad that I am being forced to be involved in the setting of our current trajectory. I hope we can find space in the future to have the necessary dialog to find a way out of the hole being dug.&lt;/p&gt;
&lt;h3 id=&quot;in-summary&quot;&gt;In summary&lt;/h3&gt;
&lt;p&gt;Obviously I hope that you agree that (a) this action against me is unwarranted, is based on flawed and/or irrelevant claims of “misbehaviour” and is based in malicious intent, and that (b) allowing this course of action to be an acceptable part of our governance procedures will have detrimental consequences for the future health of the project.&lt;/p&gt;
&lt;p&gt;I ask the CTC to reject this motion, for the TSC to reject the demand by the Board for my suspension, and that we as a technical team send a signal that our independence is critical to the success of the project, despite the accusations of an angry mob.&lt;/p&gt;
&lt;p&gt;Thank you if you dignified my words by reading this far!&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Why I don&#39;t use Node&#39;s core &#39;stream&#39; module</title>
      <link href="https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html" />
      <updated>2014-06-14T00:00:00.000Z</updated>
      <id>https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html</id>
      <content type="html">
        &lt;p&gt;&lt;em&gt;This article was originally offered to nearForm for publishing and appeared for some time on their blog from early 2014 (at this URL: &lt;a href=&quot;http://www.nearform.com/nodecrunch/dont-use-nodes-core-stream-module&quot;&gt;http://www.nearform.com/nodecrunch/dont-use-nodes-core-stream-module&lt;/a&gt;). It has since been deleted. I&#39;d rather not speculate about the reasons for the deletion but I believe the article contains a very important core message so I&#39;m now republishing it here.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The &quot;readable-stream&quot; package available in npm is a mirror of the Streams2 and Streams3 implementations in Node-core. You can guarantee a stable streams base, regardless of what version of Node you are using, if you only use &quot;readable-stream&quot;.&lt;/p&gt;
&lt;h2 id=&quot;the-good-ol-days&quot;&gt;The good &#39;ol days&lt;/h2&gt;
&lt;p&gt;Prior to Node 0.10, implementing a stream meant extending the core &lt;code&gt;Stream&lt;/code&gt; object. This object was simply an &lt;code&gt;EventEmitter&lt;/code&gt; that added a special &lt;code&gt;pipe()&lt;/code&gt; method to do the streaming magic.&lt;/p&gt;
&lt;p&gt;Implementing a stream usually started with something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Stream&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;util&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// stream logic, implemented however you want&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you ever had to write a non-trivial stream implementation for pre-Node 0.10 without using a helper library (such as &lt;a href=&quot;https://github.com/dominictarr/through&quot;&gt;through&lt;/a&gt;), you know what a nightmare the state-management it can be. The actual implementation of a custom stream is a lot more than just the above code.&lt;/p&gt;
&lt;h2 id=&quot;welcome-to-node-0-10&quot;&gt;Welcome to Node 0.10&lt;/h2&gt;
&lt;p&gt;Thankfully, Streams2 came along with a brand new set of base Stream implementations that do a whole lot more than &lt;code&gt;pipe()&lt;/code&gt;. The biggest win for stream implementers comes from the fact that state-management is almost entirely taken care of for you. You simply need to provide concrete implementations of some abstract methods to make a fully functional stream, even for non-trivial workloads.&lt;/p&gt;
&lt;p&gt;Implementing a stream now looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `Stream` is still provided for backward-compatibility&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Use `Writable`, `Duplex` and `Transform` where required&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;util&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* options, maybe `objectMode:true` */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// stream logic, implemented mainly by providing concrete method implementations:&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;State-management is handled by the base-object and you interact with internal methods, such as &lt;code&gt;this.push(chunk)&lt;/code&gt; in the case of a &lt;code&gt;Readable&lt;/code&gt; stream.&lt;/p&gt;
&lt;p&gt;While the internal streams implementations are an order-of-magnitude more complex than the previous core-streams implementation, most of it is there to make life an order-of-magnitude easier for those of us implementing custom streams. Yay!&lt;/p&gt;
&lt;h2 id=&quot;backward-compatibility&quot;&gt;Backward-compatibility&lt;/h2&gt;
&lt;p&gt;When every new major stable release of Node occurs, anyone releasing public packages in npm has to make a decision about which versions of Node they support. As a general rule, the authors of the most popular packages in npm will support the current stable version of Node and the previous stable release.&lt;/p&gt;
&lt;p&gt;Streams2 was designed with backwards-compatibility in mind. Streams using &lt;code&gt;require(&#39;stream&#39;).Stream&lt;/code&gt; as a base will still mostly work as you&#39;d expect and they will also work when piped to streams that extend the other classes. Streams2 streams won&#39;t work like classic EventEmitter objects when you pipe them together, as old-style streams do. But when you pipe a Streams2 stream and an old-style EventEmitter-based stream together, Streams2 will fall-back to &quot;compatibility-mode&quot; and operate in a backward-compatible way.&lt;/p&gt;
&lt;p&gt;So Streams2 are great and mostly backward-compatible (aside from some tricky edge cases). But what about when you want to implement Streams2 and run on Node 0.8? And what about open source packages in npm that want to still offer Node 0.8 compatibility while embracing the new Streams2-goodness?&lt;/p&gt;
&lt;h3 id=&quot;-readable-stream-to-the-rescue&quot;&gt;&quot;readable-stream&quot; to the rescue&lt;/h3&gt;
&lt;p&gt;During the 0.9 development phase, prior to the 0.10 release, Isaac developed the new Streams2 implementation in a package that was released in npm and usable on older versions of Node. The &lt;a href=&quot;https://github.com/isaacs/readable-stream&quot;&gt;readable-stream&lt;/a&gt; package is essentially a mirror of the streams implementation of Node-core but is available in npm. This is a pattern we will hopefully be seeing more of as we march towards Node 1.0. Already there is a &lt;a href=&quot;https://github.com/isaacs/core-util-is&quot;&gt;core-util-is&lt;/a&gt; package that makes available the shiny new &lt;code&gt;is&lt;/code&gt; type-checking functions in the 0.11 core &#39;util&#39; package.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readable-stream&lt;/strong&gt; gives us the ability to use Streams2 on versions of Node that don&#39;t even have Streams2 in core. So a common pattern for supporting older versions of Node while still being able to hop on the Streams2-bandwagon starts off something like this, assuming you have &quot;readable-stream&quot; as a dependency:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;readable-stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works because there is no &lt;code&gt;Readable&lt;/code&gt; object on the core &#39;stream&#39; package in 0.8 and prior, so if you are running on an older version of Node it skips straight to the &quot;readable-stream&quot; package to get the required implementation.&lt;/p&gt;
&lt;h2 id=&quot;streams3-a-new-flavour&quot;&gt;Streams3: a new flavour&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;readable-stream&lt;/strong&gt; package is still being used to track the changes to streams coming in 0.12. The upcoming Streams3 implementation is more of a tweak than a major change. It contains an attempt to make &quot;compatibility mode&quot; more of a first-class citizen of the API and also some improvements to pause/resume behaviour.&lt;/p&gt;
&lt;p&gt;Like Streams2, the aim with Streams3 is for backward (and forward) compatibility but there are limits to what can be achieved on this front.&lt;/p&gt;
&lt;p&gt;While this new streams implementation will likely be an improvement over the current Streams2 implementation, it is part of the &lt;em&gt;unstable&lt;/em&gt; development branch of Node and is so far not 
without its edge cases which can break code designed against the pure 0.10 versions of Streams2.&lt;/p&gt;
&lt;h2 id=&quot;what-is-your-base-implementation-&quot;&gt;What is your base implementation?&lt;/h2&gt;
&lt;p&gt;Looking back at the code used to fetch the base Streams2 implementation for building custom streams, let&#39;s consider what we&#39;re actually getting with different versions of Node:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;readable-stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Node 0.8 and prior:&lt;/em&gt; we get whatever is provided by the readable-stream package in our dependencies.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Node 0.10:&lt;/em&gt; we get the particular version of Streams2 that comes with the version of Node we&#39;re using.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Node 0.11:&lt;/em&gt; we get the particular version of Streams3 that comes with the version of Node we&#39;re using.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This may not be interesting if you have full control over all deployments of your custom stream implementations and which version(s) of Node they will be used on. But it can cause some problems in the case of open source libraries distributed via npm with users still stuck on 0.8 (for some, the upgrade path is not an easy one for various reasons), 0.10 and even people trying out some of the new Node and V8 features available in 0.11.&lt;/p&gt;
&lt;p&gt;What you end up with is a very unstable base upon which to build your streams implementation. This is particularly acute since the vast bulk of the code used to construct the stream logic is coming from either Node-core or the readable-stream package. Any &lt;em&gt;bugs&lt;/em&gt; fixed in later Node 0.10 releases will obviously still be present for people still stuck on earlier 0.10 releases even if the readable-stream dependency has the &lt;em&gt;fixed&lt;/em&gt; version.&lt;/p&gt;
&lt;p&gt;Then, when your streams code is run on Node 0.11, suddenly it&#39;s a Streams3 stream which has slightly different behaviour to what most of your users are experiencing.&lt;/p&gt;
&lt;p&gt;One of the ways these subtle differences are exposed is in bug reports. Users may report a bug that only occurs on their particular combination of core-streams and readable-stream and it may not be obvious that the problem is related to base-stream implementation edge-cases they are stumbling upon; wasting time for everyone.&lt;/p&gt;
&lt;p&gt;And what about stability? The fragmentation introduced by all of the possible combinations means that your otherwise stable library is having instability foisted upon it from the outside. This is one of the costs of relying on a featureful standard-library (core) within a rapidly developing, pre-v1 platform. But we can do something about it by taking control of the exact version of the base streams objects we want to extend regardless of what is bundled in the version of Node being used. &lt;strong&gt;readable-stream&lt;/strong&gt; to the rescue!&lt;/p&gt;
&lt;h2 id=&quot;taking-control&quot;&gt;Taking control&lt;/h2&gt;
&lt;p&gt;To control exactly what code your streams implementation is building on, simply pin the version of readable-stream and use only it, avoiding &lt;code&gt;require(&#39;stream&#39;)&lt;/code&gt; completely. Then you get to make the choice when to upgrade to Streams3, even if that&#39;s some time &lt;em&gt;after&lt;/em&gt; Node 0.12.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readable-stream&lt;/strong&gt; comes in two major versions, &lt;strong&gt;v1.0.x&lt;/strong&gt; and &lt;strong&gt;v1.1.x&lt;/strong&gt;. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we may see a v1.2.x branch for Node 0.12.&lt;/p&gt;
&lt;p&gt;Any library worth using should be following the basics of semver minor and patch versions (the merits and finer points of major versioning are still something worth debating). readable-stream gives you proper patch-level versioning so if you pin to &lt;code&gt;&quot;~1.0.0&quot;&lt;/code&gt; you&#39;ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level version of 1.0.x and 1.1.x should mirror the patch-level versions of Node core releases as we proceed.&lt;/p&gt;
&lt;p&gt;When you&#39;re ready to start using Streams3 you can pin to &lt;code&gt;&quot;~1.1.0&quot;&lt;/code&gt;, but you should hold off until much closer to Node 0.12, if not after its formal release.&lt;/p&gt;
&lt;h2 id=&quot;small-core-ftw-&quot;&gt;Small core FTW!&lt;/h2&gt;
&lt;p&gt;Being able to control precisely the versions of dependencies your code uses reduces the scope for bugs introduced by version incompatibilities or new and unproven implementations.&lt;/p&gt;
&lt;p&gt;When we rely on a bulky standard-library to build our libraries and applications, we&#39;re relying on a shifting sand that we have little control over. This is particularly a problem for open source libraries whose users have legitimate (and sometimes not-so-legitimate) reasons for using versions that you&#39;d rather not have to support.&lt;/p&gt;
&lt;p&gt;Streams2 is a powerful abstraction, but the implementation is far from simple. The Streams2 code is some of the most complex JavaScript you&#39;ll find in Node core. Unless you want to have a detailed understanding of how they work and be able to track the changes as they develop, you should pin your Streams2 dependency in the same way as you pin all your other dependencies. Opt for &lt;strong&gt;readable-stream&lt;/strong&gt; over what Node-core offers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mystream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;readable-stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~1.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;readable-stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;util&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;addendum-through2-&quot;&gt;Addendum: &quot;through2&quot;&lt;/h2&gt;
&lt;p&gt;If the boilerplate of the Streams2 base objects (&quot;classes&quot;) is too much for you or triggers some past-life Java PTSD, you can just opt for the &quot;through2&quot; package in npm to get the job done.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rvagg/through2&quot;&gt;through2&lt;/a&gt; is based on Dominic Tarr&#39;s &lt;a href=&quot;https://github.com/dominictarr/through&quot;&gt;through&lt;/a&gt; but is built for Streams2, whereas &quot;through&quot; is a pure Streams1 style. The API isn&#39;t quite the same but the flexibility and simplicity is.&lt;/p&gt;
&lt;p&gt;through2 gives you a &lt;code&gt;DuplexStream&lt;/code&gt; as a base to implement any kind of stream you like, be it as purely readable, purely writable or a fully duplex stream. In fact, you can even use through2 to implement a &lt;code&gt;PassThrough&lt;/code&gt; stream by not providing an implementation!&lt;/p&gt;
&lt;p&gt;From the examples:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;through2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;through2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ex.txt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;through2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap &#39;a&#39; for &#39;z&#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;out.txt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or an object stream:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;data.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;through2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phone&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;doSomethingSpecial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


      </content>
    </entry>
  
    <entry>
      <title>NodeSchool comes to Australia</title>
      <link href="https://r.va.gg/2014/06/nodeschool-comes-to-australia.html" />
      <updated>2014-06-14T00:00:00.000Z</updated>
      <id>https://r.va.gg/2014/06/nodeschool-comes-to-australia.html</id>
      <content type="html">
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://nodeschool.io&quot;&gt;NodeSchool&lt;/a&gt;&lt;/strong&gt; has its genesis ultimately at NodeConf 2013 where &lt;a href=&quot;https://twitter.com/substack&quot;&gt;@substack&lt;/a&gt; introduced us to &lt;a href=&quot;https://github.com/substack/stream-adventure&quot;&gt;stream-adevnture&lt;/a&gt;. I took the concept home to &lt;a href=&quot;http://campjs.com/&quot;&gt;CampJS&lt;/a&gt; and wrote &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/learnyounode/&quot;&gt;learnyounode&lt;/a&gt;&lt;/strong&gt; for the &lt;em&gt;introduction to Node.js&lt;/em&gt; workshop I was to run. As part of the process I extracted a package called &lt;a href=&quot;https://github.com/rvagg/workshopper&quot;&gt;workshopper&lt;/a&gt; to do the work of making a terminal workshop experience. Most of the logic originally came from stream-adventure. A short time after CampJS, I created &lt;a href=&quot;https://github.com/rvagg/levelmeup&quot;&gt;levelmeup&lt;/a&gt; for &lt;a href=&quot;http://nodeconf.eu/&quot;&gt;NodeConf.eu&lt;/a&gt; and suddenly we had a selection of what have come to be known as &lt;em&gt;&quot;workshoppers&quot;&lt;/em&gt;. At NodeConf.eu, &lt;a href=&quot;https://twitter.com/brianloveswords&quot;&gt;@brianloveswords&lt;/a&gt; suggested the NodeSchool concept and registered the &lt;a href=&quot;http://nodeschool.io&quot;&gt;domain&lt;/a&gt;, @substack provided the artwork and the ball was rolling.&lt;/p&gt;
&lt;p&gt;Today, workshopper is depended on by 22 packages in npm, most of which are workshoppers that you can install and use to learn aspects of Node.js or JavaScript in general. The curated list of usable workshoppers is maintained at &lt;a href=&quot;http://nodeschool.io&quot;&gt;nodeschool.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;learnyounode itself is now being downloaded at a rate of roughly 200 &lt;em&gt;per day&lt;/em&gt;. That&#39;s at least 200 more people each day wanting to learn how to &lt;em&gt;do Node.js&lt;/em&gt;.&lt;/p&gt;
&lt;div style=&quot;margin: 0 auto; text-align: center;&quot;&gt;

&lt;img src=&quot;https://nodei.co/npm-dl/learnyounode.png?months=6&quot; alt=&quot;learnyounode downloads&quot;&gt;

&lt;/div&gt;

&lt;p&gt;I can&#39;t recall exactly how &lt;em&gt;&quot;NodeSchool IRL&quot;&lt;/em&gt; events started but it was probably &lt;a href=&quot;http://twitter.com/maxogden&quot;&gt;@maxogden&lt;/a&gt; who has been responsible for a large number of these events. There have now been over 30 of these events around the world and the momentum is only picking up steam. The beauty of this format is that it&#39;s low-cost and low-effort to make it happen. All you need is a venue where nerds can show up with their computers and some basic guidance. There have even been a few events that were without experienced Node.js mentors but that&#39;s no great barrier as the lessons are largely self-guided and work particularly well when pairs or groups of people work together on solutions.&lt;/p&gt;
&lt;div style=&quot;margin: 0 auto; text-align: center;&quot;&gt;

&lt;img src=&quot;https://raw.githubusercontent.com/nodeschool/nodeschool.github.io/master/images/nodeschool-hex.png&quot; style=&quot;width: 300px;&quot;&gt;

&lt;/div&gt;

&lt;h2 id=&quot;nodeschool-comes-to-australia&quot;&gt;NodeSchool comes to Australia&lt;/h2&gt;
&lt;p&gt;It&#39;s surprising that so far, given all of the NodeSchool activity around the world, that we haven&#39;t had a single NodeSchool event in Australia. CampJS had learnyounode last year and this year there were &lt;a href=&quot;https://github.com/nodeschool/discussions/issues/323&quot;&gt;3 brand new workshoppers&lt;/a&gt; introduced there, so it&#39;s the closest thing we&#39;ve had.&lt;/p&gt;
&lt;p&gt;Next weekend, on the &lt;strong&gt;21st of June&lt;/strong&gt;, we are attempting a &lt;strong&gt;coordinated Australian NodeSchool&lt;/strong&gt; event. At the moment, that coordination amounts to having events hosted in Sydney, Melbourne and Hobart, unfortunately the timing has been difficult for Brisbane and we haven&#39;t managed to bring anyone else out of the woodwork. But, we will be attempting to do this regularly, plus we&#39;d like to encourage meet-up hosts to use the format now and again with their groups.&lt;/p&gt;
&lt;h2 id=&quot;nodeschool-in-sydney&quot;&gt;NodeSchool in Sydney&lt;/h2&gt;
&lt;p&gt;I&#39;ll be at NodeSchool in Sydney next weekend. It will be proudly hosted by &lt;a href=&quot;http://nicta.com.au/&quot;&gt;NICTA&lt;/a&gt; who have a space for up to 60 people. NICTA are currently doing some interesting work with WebRTC, you should catch up with &lt;a href=&quot;https://twitter.com/DamonOehlman&quot;&gt;@DamonOehlman&lt;/a&gt; if this is something you&#39;re interested in. &lt;a href=&quot;https://www.tabcorp.com.au/&quot;&gt;Tabcorp&lt;/a&gt; will also be a major sponsor of the event. Tabcorp have been building a new digital team with the back-end almost entirely in Node.js. They are also doing a great job engaging and contributing to existing and new open source projects. They are also hiring so be sure to catch up with &lt;a href=&quot;https://twitter.com/romainprieto&quot;&gt;@romainprieto&lt;/a&gt; if you&#39;re doing PHP, Java or some other abomination and want to be doing Node!&lt;/p&gt;
&lt;p&gt;Thanks to the sponsorship, we&#39;ll be able to provide some catering for the event. Currently we&#39;re looking at providing lunch but we may be expanding that to providing some breakfast treats. We&#39;ll also be providing refreshments for everyone attending throughout the day.&lt;/p&gt;
&lt;p&gt;Start time is 9.30am, end is 4pm. The plan is to spend the first half of the day doing introductory Node.js which will mainly mean working through learnyounode. The second half of the day will be less structured and we&#39;ll encourage attendees to work on other workshoppers that they find interesting. Thankfully we have some amazing Node.js programmers in Sydney and they&#39;ll be available as mentors.&lt;/p&gt;
&lt;p&gt;We are currently &lt;em&gt;selling&lt;/em&gt; tickets for $5, the money will contribute towards the event, there is no profit involved here. We don&#39;t &lt;em&gt;need&lt;/em&gt; to charge for the event but given the generally dismal turnout for tech meet-ups that are free we feel that providing a small commitment barrier will help us maximise the use of the space we have available. &lt;strong&gt;If the money is a barrier for you please contact us!&lt;/strong&gt; We don&#39;t want anyone to miss out. Also, we have special &quot;mentor&quot; tickets available for experienced Node.js programmers who are able to assist. If you think you fit into this category please contact us also.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;sign up for Sydney NodeSchool at &lt;a href=&quot;https://ti.to/nodeschool/sydney-june-2014/&quot;&gt;https://ti.to/nodeschool/sydney-june-2014/&lt;/a&gt;&lt;/strong&gt;. If you are tempted, don&#39;t sit on the fence because spots are limited and as of writing the tickets are almost 1/2 gone.&lt;/p&gt;
&lt;h2 id=&quot;nodeschool-in-melbourne&quot;&gt;NodeSchool in Melbourne&lt;/h2&gt;
&lt;p&gt;NodeSchool in Melbourne is being supported by &lt;a href=&quot;http://www.thoughtworks.com/&quot;&gt;ThoughtWorks&lt;/a&gt; who have been doing Node in Australia for a while now. If you&#39;re interested in their services or want to chat about employment opportunities you should catch up with &lt;a href=&quot;https://github.com/lfendy&quot;&gt;Liauw Fendy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sidorares&quot;&gt;@sidorares&lt;/a&gt; is putting in a large amount of the legwork in to Melbourne&#39;s event. He was a major contributor to the original learnyounode and is a huge asset to the Melbourne Node community. Along with Andrey, Melbourne has large number of expert Node.js hackers, many of who will be available as mentors. This will be a treat for Melbournians so this is not something you should miss out on if you are in town! Potential mentors should contact Andrey.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;sign up for Melbourne NodeSchool at &lt;a href=&quot;https://ti.to/nodeschool/melbourne-june-2014/&quot;&gt;https://ti.to/nodeschool/melbourne-june-2014/&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;nodeschool-in-hobart&quot;&gt;NodeSchool in Hobart&lt;/h2&gt;
&lt;p&gt;Hobart is lucky to have &lt;a href=&quot;http://joshgilli.es/&quot;&gt;@joshgillies&lt;/a&gt;, a local tech-community organiser responsible for many Tasmanian web and JavaScript events. The event is being hosted at &lt;a href=&quot;http://typewriterfactory.com/&quot;&gt;The Typewriter Factory&lt;/a&gt;, a business workspace that Josh helps run. Sponsorship is being provided by &lt;a href=&quot;http://www.acs.org.au/&quot;&gt;ACS&lt;/a&gt; who will be helping support the venue and also provide some catering.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;sign up for Hobart NodeSchool at &lt;a href=&quot;https://ti.to/nodeschool/hobart-june-2014/&quot;&gt;https://ti.to/nodeschool/hobart-june-2014/&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Testing code against many Node versions with Docker</title>
      <link href="https://r.va.gg/2013/11/testing-code-against-many-node-versions-with-docker.html" />
      <updated>2013-11-26T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/11/testing-code-against-many-node-versions-with-docker.html</id>
      <content type="html">
        &lt;p&gt;I haven&#39;t found reason to play with &lt;a href=&quot;http://www.docker.io&quot;&gt;Docker&lt;/a&gt; until now, but I&#39;ve finally came up with an excellent use-case.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rvagg/nan&quot;&gt;NAN&lt;/a&gt; is a project that helps build native Node.js add-ons while maintaining compatibility with Node and V8 from Node versions 0.8 onwards. V8 is currently undergoing major internal changes which is making add-on development very difficult; NAN&#39;s purpose is to abstract that pain. Instead of having to manage the difficulties of keeping your code compatible across Node/V8 versions, NAN does it for you. But this means that we have to be sure to keep NAN tested and compatible with all of the versions it claims to support.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt; can help a little with this. It&#39;s possible to use &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; to test across different versions of Node, we&#39;ve tried this with NAN (see the &lt;a href=&quot;https://github.com/rvagg/nan/blob/ba82a9c1fba01b3df553ac624aeaf15ca3688315/.travis.yml&quot;&gt;.travis.yml&lt;/a&gt;). Ideally you&#39;d have better choice of Node versions, but Travis have had some &lt;a href=&quot;https://github.com/travis-ci/travis-ci/issues/1328&quot;&gt;difficulty&lt;/a&gt; keeping up. Also, npm bugs make it difficult, with a high failure rate from npm install problems, like &lt;a href=&quot;https://travis-ci.org/rvagg/nan/jobs/14440485&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/rvagg/nan/jobs/14474613&quot;&gt;this&lt;/a&gt;, so I don&#39;t even publish the badge on the NAN README.&lt;/p&gt;
&lt;p&gt;The other problem with Travis is that it&#39;s a CI solution, not a proper testing solution. Even if it worked well, it&#39;s not really that helpful in the development process, you need rapid feedback that your code is working on your target platforms (this is one reason why I love back-end development more than front-end development!)&lt;/p&gt;
&lt;p&gt;Enter Docker and &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/dnt&quot;&gt;DNT&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div style=&quot;margin: 0 auto;&quot;&gt;
  &lt;img src=&quot;https://www.docker.com/sites/default/files/legal/small_v.png&quot; width=&quot;114&quot; height=&quot;114&quot;&gt;
  &lt;img src=&quot;https://nodejs.org/images/logos/nodejs-dark.png&quot; width=&quot;212&quot; height=&quot;114&quot;&gt;
  &lt;img src=&quot;https://img.pandawhale.com/29490-Picard-applause-clapping-gif-s5nz.gif&quot; width=&quot;151&quot; height=&quot;114&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dnt-docker-node-tester&quot;&gt;DNT: Docker Node Tester&lt;/h3&gt;
&lt;p&gt;Docker is a tool that simplifies the use of Linux containers to create lightweight, isolated compute &quot;instances&quot;. Solaris and its variants have had this functionality for years in the form of &quot;zones&quot; but it&#39;s a fairly new concept for Linux and Docker makes the whole process a lot more friendly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNT&lt;/strong&gt; contains two tools that work with Docker and Node.js to set-up containers for testing and run your project&#39;s tests in those containers.&lt;/p&gt;
&lt;div style=&quot;margin: 0 auto;&quot;&gt;
  &lt;img src=&quot;https://r.va.gg/images/2013/11/nan-dnt.png&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DNT&lt;/strong&gt; includes a &lt;code&gt;setup-dnt&lt;/code&gt; script that sets up the most basic Docker images required to run Node.js applications, nothing extra. It first creates an image called &quot;dev_base&quot; that uses the default Docker &quot;ubuntu&quot; image and adds the build tools required to compile and install Node.js&lt;/p&gt;
&lt;p&gt;Next it creates a &quot;node_dev&quot; image that contains a complete copy of the Node.js &lt;a href=&quot;http://github.com/joyent/node&quot;&gt;source repository&lt;/a&gt;. Finally, it creates a series of images that are required; for each Node version, it creates an image with Node installed and ready to use.&lt;/p&gt;
&lt;p&gt;Setting up a project is a matter of creating a &lt;em&gt;.dntrc&lt;/em&gt; file in the root directory of the project. This configuration file involves setting a &lt;code&gt;NODE_VERSIONS&lt;/code&gt; variable with a list of all of the versions of Node you want to test against, and this can include &quot;master&quot; to test the latest code from the Node repository. You also set a &lt;code&gt;TEST_CMD&lt;/code&gt; variable with a series of commands required to set up, compile and execute your tests. The &lt;code&gt;setup-dnt&lt;/code&gt; command can be run against a &lt;em&gt;.dntrc&lt;/em&gt; file to make sure that the appropriate Docker images are ready. The &lt;code&gt;dnt&lt;/code&gt; command can then be used to execute the tests against all of the Node versions you specified.&lt;/p&gt;
&lt;p&gt;Since Docker containers are completely isolated, &lt;strong&gt;DNT&lt;/strong&gt; can run tests in parallel as long as the machine has the resources. The default is to use the number of cores on the computer as the concurrency level but this can be configured if not appropriate.&lt;/p&gt;
&lt;p&gt;Currently &lt;strong&gt;DNT&lt;/strong&gt; is designed to parse TAP test output by reading the final line as either &quot;ok&quot; or &quot;not ok&quot; to report test status back on the command-line. It is configurable but you need to supply a command that will transform test output to either an &quot;ok&quot; or &quot;not ok&quot; (&lt;code&gt;sed&lt;/code&gt; to the rescue?).&lt;/p&gt;
&lt;h3 id=&quot;how-i-m-using-it&quot;&gt;How I&#39;m using it&lt;/h3&gt;
&lt;p&gt;My primary use-case is for testing &lt;strong&gt;NAN&lt;/strong&gt;. The test suite needs a lot of work so being able to test against all the different V8 and Node APIs while coding is super helpful; particularly when tests run so quickly! My NAN &lt;em&gt;.dntrc&lt;/em&gt; file tests against master, all of the 0.11 releases since 0.11.4 (0.11.0 to 0.11.3 are explicitly not supported by NAN) and the last 5 releases of the 0.10 and 0.8 series. At the moment that&#39;s 17 versions of Node in all and on my computer the test suite takes approximately 20 seconds to complete across all of these releases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The NAN &lt;a href=&quot;https://raw.github.com/rvagg/nan/master/.dntrc&quot;&gt;.dntrc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;NODE_VERSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  master   \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.9  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.8  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.7  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.6  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.5  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.4  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.22 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.21 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.20 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.19 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.18 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.26  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.25  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.24  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.23  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.22  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OUTPUT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nan-&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TEST_CMD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  cd /dnt/test/ &amp;&amp;                                               \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  npm install &amp;&amp;                                                 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/node-gyp --nodedir /usr/src/node/ rebuild &amp;&amp; \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/tap js/*-test.js;                            \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next I configured &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/strong&gt; for &lt;strong&gt;DNT&lt;/strong&gt;. The needs are much simpler, the tests need to do a compile and run a lot of node-tap tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The LevelDOWN &lt;a href=&quot;https://raw.github.com/rvagg/node-leveldown/master/.dntrc&quot;&gt;.dntrc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;NODE_VERSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  master   \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.9  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.8  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.22 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.21 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.26  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OUTPUT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;leveldown-&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TEST_CMD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  cd /dnt/ &amp;&amp;                                                    \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  npm install &amp;&amp;                                                 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/node-gyp --nodedir /usr/src/node/ rebuild &amp;&amp; \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/tap test/*-test.js;                          \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another native Node add-on that I&#39;ve set up with &lt;strong&gt;DNT&lt;/strong&gt; is my &lt;a href=&quot;https://github.com/rvagg/node-libssh&quot;&gt;libssh bindings&lt;/a&gt;. This one is a little more complicated because you need to have some non-standard libraries installed before compile. My &lt;em&gt;.dntrc&lt;/em&gt; adds some extra &lt;code&gt;apt-get&lt;/code&gt; sauce to fetch and install those packages. It means the tests take a little longer but it&#39;s not prohibitive. An alternative would be to configure the &lt;em&gt;node_dev&lt;/em&gt; base-image to have these packages to all of my versioned images have them too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The node-libssh &lt;a href=&quot;https://raw.github.com/rvagg/node-libssh/master/.dntrc&quot;&gt;.dntrc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;NODE_VERSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master v0.11.9 v0.10.22&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OUTPUT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libssh-&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TEST_CMD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  apt-get install -y libkrb5-dev libssl-dev &amp;&amp;                           \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  cd /dnt/ &amp;&amp;                                                            \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  npm install &amp;&amp;                                                         \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/node-gyp --nodedir /usr/src/node/ rebuild --debug &amp;&amp; \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/tap test/*-test.js --stderr;                         \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; isn&#39;t a native add-on but it does use LevelDOWN which requires compiling. For the DNT config I&#39;m removing &lt;em&gt;node_modules/leveldown/&lt;/em&gt; prior to &lt;code&gt;npm install&lt;/code&gt; so it gets rebuilt each time for each new version of Node.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://raw.github.com/rvagg/node-levelup/master/.dntrc&quot;&gt;LevelUP .dntrc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;NODE_VERSIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  master   \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.9  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.11.8  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.22 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.10.21 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  v0.8.26  \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OUTPUT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;levelup-&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TEST_CMD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  cd /dnt/ &amp;&amp;                                                    \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  rm -rf node_modules/leveldown/ &amp;&amp;                              \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  npm install --nodedir=/usr/src/node &amp;&amp;                         \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  node_modules/.bin/tap test/*-test.js --stderr;                 \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;#&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-s-next-&quot;&gt;What&#39;s next?&lt;/h3&gt;
&lt;p&gt;I have no idea but I&#39;d love to have helpers flesh this out a little more. It&#39;s not hard to imagine this forming the basis of a local CI system as well as a general testing tool. The speed even makes it tempting to run the tests on every git commit, or perhaps on every save.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to contribute to development then please submit a pull request, I&#39;d be happy to discuss anything you might think would improve this project. I&#39;m keen to share ownership with anyone making significant contributions; as I do with most of my open source projects.&lt;/p&gt;
&lt;p&gt;See the &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/dnt&quot;&gt;DNT&lt;/a&gt;&lt;/strong&gt; GitHub repo for installation and detailed usage instructions.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDOWN v0.10 / managing GC in native V8 programming</title>
      <link href="https://r.va.gg/2013/11/leveldown-v0.10-managing-gc-in-native-v8-programming.html" />
      <updated>2013-11-18T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/11/leveldown-v0.10-managing-gc-in-native-v8-programming.html</id>
      <content type="html">
        &lt;p&gt;&lt;img src=&quot;https://twimg0-a.akamaihd.net/profile_images/3360574989/92fc472928b444980408147e5e5db2fa_bigger.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;Today we released version 0.10 of &lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt;. LevelDOWN is the package that directly binds LevelDB into Node-land. It&#39;s mainly C++ and is a fairly raw &amp; direct interface to LevelDB. &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; is the package that we recommend most people use for LevelDB in Node as it takes LevelDOWN and makes it much more Node-friendly, including the addition of those lovely &lt;em&gt;ReadStreams&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Normally I wouldn&#39;t write a post about a minor release like this but this one seems significant because of a number of small changes that culminate in a &lt;em&gt;relatively&lt;/em&gt; major release.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;In this post:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;V8 &lt;code&gt;Persistent&lt;/code&gt; references&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Persistent&lt;/code&gt; in LevelDOWN; some removed, some added&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Leaks!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snappy 1.1.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Some embarrassing bugs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domains&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;A final note on Node 0.11.9&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;v8-persistent-references&quot;&gt;V8 &lt;code&gt;Persistent&lt;/code&gt; references&lt;/h3&gt;
&lt;p&gt;The main story of this release are &lt;code&gt;v8::Persistent&lt;/code&gt; references. For the uninitiated, V8 internally has two different ways to track &quot;handles&quot;, which are references to JavaScript objects and values currently active in a running program. There are &lt;code&gt;Local&lt;/code&gt; references and there are &lt;code&gt;Persistent&lt;/code&gt; references. &lt;code&gt;Local&lt;/code&gt; references are the most common, they are the references you get when you create an object or pass them around within a function and do the normal work that you do with an object. &lt;code&gt;Persistent&lt;/code&gt; references are a special case that is all about &lt;em&gt;Garbage Collection&lt;/em&gt;. An object that has at least one active &lt;code&gt;Persistent&lt;/code&gt; reference to it is not a candidate for garbage collection. &lt;code&gt;Persistent&lt;/code&gt; references must be explicitly destroyed before they release the object and make it available to the garbage collector.&lt;/p&gt;
&lt;p&gt;Prior to V8 3.2x.xx &lt;em&gt;(I don&#39;t know the exact version, does it matter? It roughly corresponds to Node v0.11.3.)&lt;/em&gt;, these handles were both as easy as each other to create and interchange. You could swap one for the other whenever you needed. My guess is that the V8 team decided that this was a little &lt;em&gt;too&lt;/em&gt; easy and that a major cause for memory leaks in C++ V8 code was the ease at which you could swap a &lt;code&gt;Local&lt;/code&gt; for a &lt;code&gt;Persistent&lt;/code&gt; and then forget to destroy the &lt;code&gt;Persistent&lt;/code&gt;. So they tweaked the &quot;ease&quot; equation and it&#39;s become quite difficult.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Persistent&lt;/code&gt; and &lt;code&gt;Local&lt;/code&gt; no longer share the same type hierarchy and the way you instantiate and assign a &lt;code&gt;Persistent&lt;/code&gt; has become quite awkward. You now have to go through enough gymnastics to create a &lt;code&gt;Persistent&lt;/code&gt; that it makes you ask the question: &lt;em&gt;&quot;Do I really need this to be a &lt;code&gt;Persistent&lt;/code&gt;?&quot;&lt;/em&gt; Which I guess is a good thing for memory leaks. &lt;a href=&quot;https://github.com/rvagg/nan&quot;&gt;NAN&lt;/a&gt; to the rescue though! We&#39;ve somewhat papered over those difficulties with the capabilities introduced in NAN, it&#39;s still not as easy as it once was but it&#39;s not a total headache.&lt;/p&gt;
&lt;p&gt;So, you understand &lt;code&gt;v8::Persistent&lt;/code&gt; now? Great, so back to LevelDOWN.&lt;/p&gt;
&lt;h3 id=&quot;-persistent-in-leveldown-some-removed-some-added-&quot;&gt;&lt;code&gt;Persistent&lt;/code&gt; in LevelDOWN; some removed, some added!&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Some removed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently, &lt;a href=&quot;https://github.com/mcollina&quot;&gt;Matteo&lt;/a&gt; noticed that when you&#39;re performing a &lt;code&gt;Batch()&lt;/code&gt; operation in LevelDB, there is an explicit copy of the data that you&#39;re feeding in to that batch. When you construct a Batch operation in LevelDB you start off with a short string representing the batch and then build on that string as you build your batch with both &lt;code&gt;Put()&lt;/code&gt; and &lt;code&gt;Del()&lt;/code&gt; operations. You end up with a long string containing all of your write data; keys and values. Then when you call &lt;code&gt;Write()&lt;/code&gt; on the Batch, that string gets fed directly into the main LevelDB store as a single write&amp;mdash;which is where the atomicity of Batch comes from.&lt;/p&gt;
&lt;p&gt;Both the chained-form and array-form &lt;code&gt;batch()&lt;/code&gt; operations work this way internally in LevelDOWN.&lt;/p&gt;
&lt;p&gt;However, with almost all operations in LevelDOWN, we perform the actual writes and reads against LevelDB in libuv worker threads. So we have to create the &quot;descriptor&quot; for work in the main V8 Node thread and then hand that off to libuv to perform the work in a separate thread. Once the work is completed we get the results back in the main V8 Node thread from where we can trigger a callback. This is where &lt;code&gt;Persistent&lt;/code&gt; references come in.&lt;/p&gt;
&lt;p&gt;Before we hand off the work to libuv, we need to make &lt;code&gt;Persistent&lt;/code&gt; references to any V8 object that we want to survive across the asynchronous operation. Obviously the main candidate for this is &lt;code&gt;callback&lt;/code&gt; functions. Consider this code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo = %s&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we&#39;ve actually done is create an anonymous closure for our callback. It has nothing referencing it, so as far as V8 is concerned it&#39;s a candidate for garbage collection once the current thread of execution is completed. In Node however, we&#39;re doing asynchronous work with it and need it to survive until we actually call it. This is where &lt;code&gt;Persistent&lt;/code&gt; references come in. We receive the &lt;code&gt;callback&lt;/code&gt; function as a &lt;code&gt;Local&lt;/code&gt; in our C++ but then assign it to a &lt;code&gt;Persistent&lt;/code&gt; so GC doesn&#39;t touch it. Once we&#39;re done our async work we can call the function and destroy the &lt;code&gt;Persistent&lt;/code&gt;, effectively turning it back in to a &lt;code&gt;Local&lt;/code&gt; and freeing it up for GC.&lt;/p&gt;
&lt;p&gt;Without the &lt;code&gt;Persistent&lt;/code&gt; then the behaviour is indeterminate. It depends on the version of V8, the GC settings, the workload currently in the program and the amount of time the async work takes to complete. If the GC is aggressive enough and has a chance to run before our async work is complete, the &lt;code&gt;callback&lt;/code&gt; will disappear and we&#39;ll end up trying to call a function that no longer exists. This can obviously lead to runtime errors and will most likely crash our program.&lt;/p&gt;
&lt;p&gt;In LevelDOWN, if you&#39;re passing in &lt;code&gt;String&lt;/code&gt; objects for keys and values then to pull out the data and turn it in to a form that LevelDB can use we have to do an explicit &lt;em&gt;copy&lt;/em&gt;. Once we&#39;ve copied the data from the &lt;code&gt;String&lt;/code&gt; then we don&#39;t need to care about the original object and GC can get its hands on it as soon as it wants. So we can leave &lt;code&gt;String&lt;/code&gt; objects as &lt;code&gt;Local&lt;/code&gt; references while we are building the descriptor for our async work.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt; objects are a different matter all together. Because we have access to the raw character array of a &lt;code&gt;Buffer&lt;/code&gt;, we can feed that data straight in to LevelDB and this will save us one &lt;em&gt;copy&lt;/em&gt; operation (which can be a significant performance boost if the data is significantly large or you&#39;re doing lots of operations&amp;mdash;so prefer &lt;code&gt;Buffer&lt;/code&gt;s where convenient if you need higher perf). When building the descriptor for the async work, we are just passing a character array to the LevelDB data structures that we&#39;re setting up. Because the data is shared with the original &lt;code&gt;Buffer&lt;/code&gt; we have to make sure that GC doesn&#39;t clean up that &lt;code&gt;Buffer&lt;/code&gt; before we have a chance to use the data. So we make a &lt;code&gt;Persistent&lt;/code&gt; reference for it which we clean up after the async work is complete. So you can do this without worrying about GC:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;crypto&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo is now some random data!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This has been the case in LevelDOWN for all operations since pretty much the beginning. But back to Matteo&#39;s observation. If LevelDB&#39;s data structures perform an explicit copy on the data we feed it then perhaps we don&#39;t need to keep the original data safe from GC? For a &lt;code&gt;batch()&lt;/code&gt; call it turns out that we don&#39;t! When we&#39;re constructing the Batch descriptor, as we feed in data to it, both &lt;code&gt;Put()&lt;/code&gt; and &lt;code&gt;Del()&lt;/code&gt;, it&#39;s taking a copy of our data to create its internal representation. So even when we&#39;re using &lt;code&gt;Buffer&lt;/code&gt; objects on the JavaScript side, we&#39;re done with them before the call down in to LevelDOWN is completed so there&#39;s no reason to save a &lt;code&gt;Persistent&lt;/code&gt; reference! For other operations we&#39;re still doing some copying during the asynchronous cycle but the removal of the overhead of creating and deleting &lt;code&gt;Persistent&lt;/code&gt; references for &lt;code&gt;batch()&lt;/code&gt; calls is fantastic news for those doing bulk data loading (like Max Ogden&#39;s &lt;a href=&quot;https://github.com/maxogden/dat&quot;&gt;dat&lt;/a&gt; project which needs to bulk load a &lt;em&gt;lot&lt;/em&gt; of data).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some added&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another gem from Matteo was reports of crashes during certain &lt;code&gt;batch()&lt;/code&gt; operations. Difficult to reproduce and only under very particular circumstances, it seems to be mostly reproducible by the kinds of workloads generated by LevelGraph. Thanks to some simple C++ debugging we traced it to a dropped reference, obviously by GC. The code in question boiled down to something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doStuff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this code, the &lt;code&gt;batch&lt;/code&gt; object is actually a LevelDOWN &lt;code&gt;Batch&lt;/code&gt; object created in C++-land. During the &lt;code&gt;write()&lt;/code&gt; operation, which is asynchronous, we end up with no hard references to &lt;code&gt;batch&lt;/code&gt; in our code because the JS thread has yieled and moved on and the &lt;code&gt;batch&lt;/code&gt; is contained within the scope of the &lt;code&gt;doStuff()&lt;/code&gt; function. Because most of the asynchronous operations we perform are relatively quick, this normally doesn&#39;t matter. But for writes to LevelDB, if you have enough data in your write and you have enough data already in your data store, you can trigger a compaction upstream which can delay the write which can give V8&#39;s GC time to clean up references that might be important and for which you have no &lt;code&gt;Persistent&lt;/code&gt; handles.&lt;/p&gt;
&lt;p&gt;In this case, we weren&#39;t actually creating internal &lt;code&gt;Persistent&lt;/code&gt; references for some of our objects. &lt;code&gt;Batch&lt;/code&gt; in this case but also &lt;code&gt;Iterator&lt;/code&gt;. Normally this isn&#39;t a problem because to use these objects you &lt;em&gt;generally&lt;/em&gt; keep references to them yourself in your own code.&lt;/p&gt;
&lt;p&gt;We managed to debug Matteo&#39;s crash by adjusting his test code to look something like this and watching it succeed without a crash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doStuff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By reusing &lt;code&gt;batch&lt;/code&gt; inside our &lt;code&gt;callback&lt;/code&gt; function, we&#39;re creating some work that V8 can&#39;t optimise away and therefore has to assume isn&#39;t a noop. Because the &lt;code&gt;batch&lt;/code&gt; variable is also now referenced by the &lt;code&gt;callback&lt;/code&gt; function and we already have an internal &lt;code&gt;Persistent&lt;/code&gt; for it, GC has to pass over &lt;code&gt;batch&lt;/code&gt; until the &lt;code&gt;Persistent&lt;/code&gt; is destroyed for the &lt;code&gt;callback&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So the solution is simply to create a &lt;code&gt;Persistent&lt;/code&gt; for the internal objects that need to survive across asynchronous operations and make no assumptions about how they&#39;ll be used in JavaScript-land. In our case we&#39;ve gone for assigning a &lt;code&gt;Persistent&lt;/code&gt; just prior to every asynchronous operation and destroying it after. The alternative would be to have a &lt;code&gt;Persistent&lt;/code&gt; assigned upon the creation of objects we care about but sometimes we want GC to do its work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dontDoStuff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// nothing else, wut?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don&#39;t know why you would write that code but perhaps you have a use-case where you want the ability to start constructing a batch but then decide not to follow through with it. GC should be able to take care of your mess like it does with all of the other messes you create in your daily adventures with JavaScript.&lt;/p&gt;
&lt;p&gt;So we are only assigning a &lt;code&gt;Persistent&lt;/code&gt; when you do a &lt;code&gt;write()&lt;/code&gt; with a chained-batch operation in LevelDOWN since it&#39;s the only asynchronous operation. So in &lt;code&gt;dontDoStuff()&lt;/code&gt; GC will come along and rid us of &lt;code&gt;batch&lt;/code&gt;, &lt;code&gt;&#39;foo&#39;&lt;/code&gt; and &lt;code&gt;&#39;bar&#39;&lt;/code&gt; when it has the next opportunity and our C++ code will have the appropriate destructors called that will clean up any other objects we have created along the way, like the internal LevelDB &lt;code&gt;Batch&lt;/code&gt; with its copy of our data.&lt;/p&gt;
&lt;h3 id=&quot;leaks-&quot;&gt;Leaks!&lt;/h3&gt;
&lt;p&gt;We&#39;ve been having some trouble with leaks in LevelUP/LevelDOWN lately &lt;em&gt;(&lt;a href=&quot;https://github.com/rvagg/node-levelup/issues/171&quot;&gt;LevelDOWN/#171&lt;/a&gt;, &lt;a href=&quot;https://github.com/mcollina/levelgraph/issues/40&quot;&gt;LevelGraph/#40&lt;/a&gt;)&lt;/em&gt;. And it turns out that these leaks aren&#39;t related to &lt;code&gt;Persistent&lt;/code&gt; references, which shouldn&#39;t be a surprise since it&#39;s so easy to leak with non-GC code, particularly if you spend most of your day programming in a language with GC.&lt;/p&gt;
&lt;p&gt;With the help of &lt;a href=&quot;http://valgrind.org/&quot;&gt;Valgrind&lt;/a&gt; we tracked the leak down to the omission of a &lt;code&gt;delete&lt;/code&gt; in the destructor of the asynchronous work descriptor for array-batch operations. The internal LevelDB representation of a Batch wasn&#39;t being cleaned up unless you were using the chained-form of LevelDOWN&#39;s &lt;code&gt;batch()&lt;/code&gt;. This one has been dogging us for a few releases now and it&#39;s been a headache particularly for people doing bulk-loading of data so I hope we can finally put it behind us!&lt;/p&gt;
&lt;h3 id=&quot;snappy-1-1-1&quot;&gt;Snappy 1.1.1&lt;/h3&gt;
&lt;p&gt;Google released a new version of Snappy, version 1.1.1. I don&#39;t really understand how Google uses &lt;a href=&quot;http://semver.org/&quot;&gt;semver&lt;/a&gt;; we get very simple LevelDB releases with the minor version bumped and then we get versions of Snappy released with non-trivial changes with only the patch version bumped. I suspect that Google doesn&#39;t know how it uses semver either and there&#39;s no internal policy on it.&lt;/p&gt;
&lt;p&gt;Anyway, Snappy 1.1.1 has some fixes, some minor speed and compression improvements but most importantly it breaks compilation on Windows. So we had to figure out how to fix that for this release. Ugh. I also took the opportunity to clean up some of the compilation options for Snappy and we may see some improvements in the way it works now... perhaps.&lt;/p&gt;
&lt;h3 id=&quot;some-embarrassing-bugs&quot;&gt;Some embarrassing bugs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kytwb&quot;&gt;Amine Mouafik&lt;/a&gt; is new to the LevelDOWN repository but has picked up some rather embarrassing bugs/omissions that are probably my fault. It&#39;s great to have more eyes on the C++ code, there&#39;s not enough JavaScript programmers with the confidence to dig in to messy C++-land.&lt;/p&gt;
&lt;p&gt;Firstly, on our standard LevelDOWN releases, it turns out that we haven&#39;t actually been enabling the internal &lt;strong&gt;bloom filter&lt;/strong&gt;. The bloom filter was introduced in LevelDB to speed up read operations to avoid having to scan through whole blocks to find the data a read is looking for. So that&#39;s now enabled for 0.10.&lt;/p&gt;
&lt;p&gt;Then he discovered that we had been &lt;strong&gt;turning off compression&lt;/strong&gt; by default! I believe this happened with the the switch to NAN. The signature for reading boolean options from V8 objects was changed from internal &lt;code&gt;LD_BOOLEAN_OPTION_VALUE&lt;/code&gt; &amp; &lt;code&gt;LD_BOOLEAN_OPTION_VALUE_DEFTRUE&lt;/code&gt; macros for defaulting to true and false respectively when the options aren&#39;t supplied, to the NAN version which is a unified &lt;code&gt;NanBooleanOptionValue&lt;/code&gt; which takes an optional &lt;code&gt;defaultValue&lt;/code&gt; argument that can be used to make the default &lt;code&gt;true&lt;/code&gt;. This happened at roughly Node version 0.11.4.&lt;/p&gt;
&lt;p&gt;Well, this code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NanBooleanOptionValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NanSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;compression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is now this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NanBooleanOptionValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionsObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NanSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;compression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so if you don&#39;t supply a &lt;code&gt;&quot;compression&quot;&lt;/code&gt; boolean option in your db setup operation then it&#39;ll now actually be turned on!&lt;/p&gt;
&lt;h3 id=&quot;domains&quot;&gt;Domains&lt;/h3&gt;
&lt;p&gt;We&#39;ve finally caught up with properly supporting Node&#39;s &lt;a href=&quot;http://nodejs.org/docs/latest/api/domain.html&quot;&gt;domains&lt;/a&gt; by switching all C++ &lt;code&gt;callback&lt;/code&gt; calls from standard V8 &lt;code&gt;callback-&gt;Call(...)&lt;/code&gt; to Node&#39;s own &lt;code&gt;node::MakeCallback(callback, ...)&lt;/code&gt; which does the same thing but also does lots of additional things, including accounting for domains. This change was also included in NAN version 0.5.0.&lt;/p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Go and upgrade!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;leveldown@0.10.0 is packaged with the new levelup@0.18.0 and level@0.18.0 which have their minor versions bumped purely for this LevelDOWN release.&lt;/p&gt;
&lt;p&gt;Also released are the packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;leveldown-hyper@0.10.0&lt;/li&gt;
&lt;li&gt;leveldown-basho@0.10.0&lt;/li&gt;
&lt;li&gt;rocksdb@0.10.0 (based on the same LevelDOWN code) (Linux only)&lt;/li&gt;
&lt;li&gt;level-hyper@0.18.0 (levelup on leveldown-hyper)&lt;/li&gt;
&lt;li&gt;level-basho@0.18.0 (levelup on leveldown-basho)&lt;/li&gt;
&lt;li&gt;level-rocks@0.18.0 (levelup on rocksdb) (Linux only)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ll write more about these packages in the future since they&#39;ve gone largely under the radar for most people. If you&#39;re interested in catching up then please join &lt;strong&gt;##leveldb&lt;/strong&gt; on Freenode where there&#39;s a bunch of Node database people and also a few non-Node LevelDB people like &lt;a href=&quot;https://twitter.com/rescrv&quot;&gt;Robert Escriva&lt;/a&gt;, author of HyperLevelDB and all-round LevelDB expert.&lt;/p&gt;
&lt;h3 id=&quot;-a-final-note-on-node-0-11-9-&quot;&gt;&lt;em&gt;A final note on Node 0.11.9&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;There will be a LevelDOWN@0.10.1 very soon that will increment the NAN dependency to 0.6.0 when it&#39;s released. This new version of NAN will specifically deal with Node 0.11.9 compatibility where there are more breaking V8 changes that will cause compile errors for any addon not taking them in to account. So if you&#39;re living on the edge in Node then we should have a release soon enough for you!&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>All the levels!</title>
      <link href="https://r.va.gg/2013/10/all-the-levels.html" />
      <updated>2013-10-09T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/10/all-the-levels.html</id>
      <content type="html">
        &lt;p&gt;When we completely separated &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; and &lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt; so that installing LevelUP didn&#39;t automatically get you LevelDOWN, we set up a new package called &lt;strong&gt;&lt;a href=&quot;https://github.com/Level/level&quot;&gt;Level&lt;/a&gt;&lt;/strong&gt; that has them both as a dependency so you just need to do &lt;code&gt;var level = require(&#39;level&#39;)&lt;/code&gt; and everything is done for you.&lt;/p&gt;
&lt;p&gt;But, we now have more than just the vanilla (Google) LevelDB in LevelDOWN. We also have a HyperLevelDB version and a Basho fork. These are maintained on branches in the LevelDOWN repo and are usually released now every time a new LevelDOWN is released. They are called &lt;strong&gt;leveldown-hyper&lt;/strong&gt; and &lt;strong&gt;leveldown-basho&lt;/strong&gt; in npm but you need to plug them in to LevelUP yourself to make them work. We also have &lt;a href=&quot;https://github.com/rvagg/lmdb&quot;&gt;Node LMDB&lt;/a&gt; that&#39;s LevelDOWN compatible and a few others.&lt;/p&gt;
&lt;p&gt;So, as of today, we&#39;ve released a new, small library called &lt;strong&gt;&lt;a href=&quot;https://github.com/level/level-packager&quot;&gt;level-packager&lt;/a&gt;&lt;/strong&gt; that does this bundling process so that you can feed it a LevelDOWN instance and it&#39;ll return a Level-type object that can be exported from a package like &lt;strong&gt;Level&lt;/strong&gt;. This is meant to be used internally and it&#39;s now being used to support these new packages that are available in npm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Level/level-hyper&quot;&gt;level-hyper&lt;/a&gt;&lt;/strong&gt; bundles the HyperLevelDB version of LevelDOWN with LevelUP&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Level/level-basho&quot;&gt;level-basho&lt;/a&gt;&lt;/strong&gt; bundles the Bash fork of LevelDB in LevelDOWN with LevelUP&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Level/level-lmdb&quot;&gt;level-lmdb&lt;/a&gt;&lt;/strong&gt; bundles Node LMDB with LevelUP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The version numbers of these packages will track the version of LevelUP.&lt;/p&gt;
&lt;p&gt;So you can now simply do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level-hyper&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;woohoo!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you&#39;re already using &lt;strong&gt;Level&lt;/strong&gt; then you can very easily switch it out with one of these alternatives to try them out.&lt;/p&gt;
&lt;p&gt;Both HyperLevelDB and the Basho LevelDB fork are binary-compatible with Google&#39;s LevelDB, with one small caveat: with the latest release, LevelDB has switched to making &lt;em&gt;.ldb&lt;/em&gt; files instead of &lt;em&gt;.sst&lt;/em&gt; files inside a data store directory because of something about Windows backups (blah blah). Neither of the alternative forks know anything about these new files yet so you may run in to trouble if you have &lt;em&gt;.ldb&lt;/em&gt; files in your store (although I&#39;m pretty sure you can simply rename these to &lt;em&gt;.sst&lt;/em&gt; and it&#39;ll be fine with any version).&lt;/p&gt;
&lt;p&gt;Also, LMDB is completely different to LevelDB so you won&#39;t be able to open an existing data store. But you should be able to do something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/level.db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level-lmdb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/lmdb.db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whoa...&lt;/p&gt;
&lt;h3 id=&quot;a-note-about-hyperleveldb&quot;&gt;A note about HyperLevelDB&lt;/h3&gt;
&lt;p&gt;Lastly, I&#39;d like to encourage you to try the HyperLevelDB version if you are pushing hard on LevelDB&#39;s performance. The HyperDex fork is tuned for multi-threaded access for reads and writes and is therefore particularly suited to how we use it in Node. The Basho version doesn&#39;t show much performance difference mainly because they are optimising for Riak running 16 separate instances on the same server so multi-threaded access isn&#39;t as interesting for them. You should find significant performance gains if you&#39;re doing very heavy writes in particular with HyperLevelDB. Also, if you&#39;re interested in support for HyperLevelDB then pop in to ##leveldb on Freenode and bother &lt;em&gt;&lt;a href=&quot;https://twitter.com/rescrv&quot;&gt;rescrv&lt;/a&gt;&lt;/em&gt; (Robert Escriva), author of HyperLevelDB and our resident LevelDB expert.&lt;/p&gt;
&lt;p&gt;It&#39;s also worth nothing that HyperDex are interested in offering commercial support for people using LevelDB, not just HyperLevelDB but also Google&#39;s LevelDB. This means that anyone using either of these packages in Node should be able to get solid support if they are doing any heavy work in a commercial environment and need the surety of experts behind them to help pick up the pieces. I imagine this would cover things like LevelDB corruption and any LevelDB bugs you may run in to (we&#39;re currently looking at a subtle &lt;a href=&quot;https://github.com/rvagg/node-levelup/issues/171&quot;&gt;batch-related LevelDB bug&lt;/a&gt; that&#39;s come along with the 1.14.0 release, they do exist!). Talk to Robert if you want more information about commercial support.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Should I use a single LevelDB or many to hold my data?</title>
      <link href="https://r.va.gg/2013/10/should-i-use-a-single-leveldb-or-many-to-hold-my-data.html" />
      <updated>2013-10-03T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/10/should-i-use-a-single-leveldb-or-many-to-hold-my-data.html</id>
      <content type="html">
        &lt;p&gt;This is a long overdue post, so long in fact that I can&#39;t remember who I promised to do this for! Regardless, I keep on having discussions around this topic so I thought it worthwhile putting down some notes on what I believe to be the factors you should consider when making this decision.&lt;/p&gt;
&lt;h3 id=&quot;what-s-the-question-&quot;&gt;What&#39;s the question?&lt;/h3&gt;
&lt;p&gt;It goes like this: You have an application that uses LevelDB, in particular I&#39;m talking about Node.js applications here but the same would apply if you&#39;re using LevelUP in the browser and also most of the other back-ends for LevelUP. And you invariably end up with different kinds of data, sometimes the kinds of data you&#39;re storing is so different that it feels strange putting them into the same storage blob. Often though, you just have sets of not-very-related data that you need to store and you end up having to make a decision: &lt;strong&gt;do I put everything into a single LevelDB store or do I put things into their own, separate, LevelDB store?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;this-stuff-doesn-t-belong-together-&quot;&gt;This stuff doesn&#39;t &lt;em&gt;belong&lt;/em&gt; together!&lt;/h3&gt;
&lt;p&gt;Coming from an relational database background, it took me a little while to displace the concept of discrete &lt;em&gt;tables&lt;/em&gt; with the notion of &lt;em&gt;namespacing&lt;/em&gt; within the same store. I can understand the temptation to want to keep things separate, not wanting to end up with a huge blob of data that just &lt;em&gt;shouldn&#39;t be together&lt;/em&gt;. But this isn&#39;t the relational database world and you need to move on!&lt;/p&gt;
&lt;p&gt;We have a set of LevelUP addons, such as &lt;a href=&quot;https://github.com/dominictarr/level-sublevel&quot;&gt;sublevel&lt;/a&gt;, that exist mainly to provide you with the comfort of being able to separate your data by whatever criteria makes sense. &lt;a href=&quot;https://github.com/deanlandolt/bytewise&quot;&gt;bytewise&lt;/a&gt; is another tool that can serve a similar purpose and some people even use sublevel and bytewise together to achieve more complex organisation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We have the tools at our disposal in Node.js to turn a one-dimensional storage array into a very complex, multidimensional storage &lt;em&gt;system&lt;/em&gt; where unrelated, and semi-related data can coexist.&lt;/strong&gt; So, if the only reason you want to store things in separate stores is because it just &lt;em&gt;feels&lt;/em&gt; right to do so, you should probably be looking at what&#39;s making you think that way. You may need to update your assumptions.&lt;/p&gt;
&lt;h3 id=&quot;technical-considerations&quot;&gt;Technical considerations&lt;/h3&gt;
&lt;p&gt;That aside, there are some technical considerations for making this decision:&lt;/p&gt;
&lt;h4 id=&quot;size-and-performance&quot;&gt;Size and performance&lt;/h4&gt;
&lt;p&gt;To be clear, &lt;strong&gt;LevelDB is fast&lt;/strong&gt; and it can also store &lt;strong&gt;lots of data&lt;/strong&gt;, it&#39;ll handle Gigabytes of data without too much sweat. However, there &lt;em&gt;are&lt;/em&gt; some performance concerns when you start getting in to the Gigabyte range, mainly when you&#39;re trying to push data in at a high rate. Most use-cases don&#39;t do this so be honest about your performance needs. For most people LevelDB is simply fast.&lt;/p&gt;
&lt;p&gt;However, if you do have a high-throughput scenario involving a large amount of data that you need to store then you may want to consider having a separate store to deal with the large data and another one to deal with the rest of your data so the performance isn&#39;t impacted across the board.&lt;/p&gt;
&lt;p&gt;But again, be honest about what your workload is, you&#39;re probably not pushing &lt;a href=&quot;http://voxer.com&quot;&gt;Voxer&lt;/a&gt; amounts of data so don&#39;t prematurely optimise around the workload you&#39;d like to think you have or are going to have one day in the distant future.&lt;/p&gt;
&lt;h3 id=&quot;cache&quot;&gt;Cache&lt;/h3&gt;
&lt;p&gt;Caching is transparent by default with LevelDB so it&#39;s easy to forget about it when making these kinds of decisions but it&#39;s actually quite important for this particular question.&lt;/p&gt;
&lt;p&gt;By default, you have an 8M LRU cache with LevelDB and &lt;em&gt;all&lt;/em&gt; reads use that cache, for look-ups and also for updating with newly read values. So, you can have a lot of cache-thrash unless you&#39;re reading the same values again and again. &lt;/p&gt;
&lt;p&gt;But, there is a &lt;code&gt;fillCache&lt;/code&gt; (boolean) option for read operations (both &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;createReadStream()&lt;/code&gt; and its variations). So you can set this to &lt;code&gt;false&lt;/code&gt; where you know you won&#39;t be needing fast access to those entries again and you don&#39;t want to push out other entries from the LRU.&lt;/p&gt;
&lt;p&gt;So caching strategies can be separate for different types of data and are not a strong reason to keep things in a separate data store.&lt;/p&gt;
&lt;p&gt;I always recommend that you should tinker with the &lt;code&gt;cacheSize&lt;/code&gt; option when you&#39;re using LevelDB, it can be as large as you want to fit in the available memory of your machine. As a rule of thumb, somewhere between 2/3 and 3/4 of the available memory should be a maximum if you can afford it.&lt;/p&gt;
&lt;p&gt;Consider though what happens if you are using separate LevelDB stores, you now have to deal with juggling &lt;code&gt;cacheSize&lt;/code&gt; between the stores. Often, you&#39;re probably going to be best served by having a single, large cache that can operate across all your data types and let the normal behaviour of your application determine what gets cached with occasional reliance on &lt;code&gt;&#39;fillCache&#39;: false&lt;/code&gt; to fine-tune. &lt;/p&gt;
&lt;h3 id=&quot;consistency&quot;&gt;Consistency&lt;/h3&gt;
&lt;p&gt;As I discussed in my &lt;a href=&quot;https://r.va.gg/presentations/lxjs2013/&quot;&gt;LXJS&lt;/a&gt; talk, the &lt;em&gt;atomic batch&lt;/em&gt; is an important primitive for building solid database functionality with inherent &lt;em&gt;consistency&lt;/em&gt;. When you&#39;re using &lt;strong&gt;sublevel&lt;/strong&gt;, even though you have what operate like separate LevelUP instances for each sublevel, you still get to perform atomic batch operations between sublevels. Consider indexing where you may have a primary sublevel for the entries you&#39;re writing and a secondary sublevel for the indexing data used to reference the primary data for lookups. If you&#39;re running these as separate stores then you lose the benefits of the atomic batch, you just can&#39;t perform multiple operations with guaranteed consistency.&lt;/p&gt;
&lt;p&gt;Try and keep the atomic batch in mind when building your application, instead of accepting the possibility of inconsistent state, use the batch to keep consistency.&lt;/p&gt;
&lt;h3 id=&quot;back-end-flexibility&quot;&gt;Back-end flexibility&lt;/h3&gt;
&lt;p&gt;OK, this one is a bit left-field, but remember that LevelUP is back-end-agnostic. It&#39;s inspired by LevelDB but it doesn&#39;t have to be Google&#39;s LevelDB that&#39;s storing data for you. It could be Basho&#39;s fork or HyperLevelDB. It could even be LMDB or something a little crazy like MemDOWN or mysqlDOWN! &lt;/p&gt;
&lt;p&gt;If you&#39;re at all concerned about performance, and most people claim to be even though they&#39;re not building performance-critical applications, then you should be benchmarking your particular workload against your storage system. Each of the back-ends for LevelUP have different performance characteristics and different trade-offs that you need to understand and test against your needs. You may find that one back-end works for one kind of data in your application and another back-end works for another.&lt;/p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;The TL;DR is: in most cases, a single LevelDB store is generally preferable unless you have a &lt;em&gt;real&lt;/em&gt; reason for having separate ones.&lt;/p&gt;
&lt;p&gt;Have I missed any considerations that you&#39;ve come across when making this choice? Let me know in the comments.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Primitives for JS Databases (an LXJS adventure)</title>
      <link href="https://r.va.gg/2013/10/primitives-for-js-databases-an-lxjs-adventure.html" />
      <updated>2013-10-03T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/10/primitives-for-js-databases-an-lxjs-adventure.html</id>
      <content type="html">
        &lt;p&gt;I gave a talk yesterday at &lt;strong&gt;&lt;a href=&quot;http://2013.lxjs.org&quot;&gt;LXJS&lt;/a&gt;&lt;/strong&gt; yesterday in the &lt;em&gt;&quot;Infrastructure.js&quot;&lt;/em&gt; block and tried to talk about JavaScript Database Primitives; i.e. the basic building blocks we have landed on for building more complex database solutions in JavaScript.&lt;/p&gt;
&lt;p&gt;The talk certainly wasn&#39;t as good or clear as I wanted it to be, it worked much better in my head! A huge venue with over 300 talented JavaScripters, an absolutely massive screen, bright lights and loud amplification got the better of me and I wasn&#39;t able to pull the material together how I wanted to. The introvert within me is telling me to become a recluse for a little while just to recover! My &lt;em&gt;hope&lt;/em&gt; is that at least one or two people are inspired to give &lt;em&gt;database hacking&lt;/em&gt; a go because it&#39;s really not that difficult once you get your head around the primitives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Edit:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;I wasn&#39;t trying to elicit sympathy here, I genuinely think that I wasn&#39;t clear on what I was trying to communicate. It went so well in my head, as it usually does, but I fell far short of what I wanted to express. I&#39;ll attempt to rectify some of that with a writeup (see next para).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thankfully though, a portion of the material will be able to serve as the basis for the, long overdue, third part in my &lt;a href=&quot;http://dailyjs.com/2013/04/19/leveldb-and-node-1/&quot;&gt;three&lt;/a&gt; &lt;a href=&quot;http://dailyjs.com/2013/05/03/leveldb-and-node-2/&quot;&gt;part&lt;/a&gt; &lt;a href=&quot;http://dailyjs.com&quot;&gt;DailyJS&lt;/a&gt; series on LevelDB &amp; Node.&lt;/p&gt;
&lt;p&gt;In summary, inspired by LevelDB, we&#39;ve ended up with a core set of primitives in &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; that can be used to build feature-rich and advanced database functionality. &lt;strong&gt;Atomic batch&lt;/strong&gt; and &lt;strong&gt;ReadStream&lt;/strong&gt; are the two non-trivial primitives, open, close, get, put, del are all pretty easy to understand as primitives, although &lt;em&gt;del&lt;/em&gt; is perhaps redundant but we&#39;re opting for explicitness.&lt;/p&gt;
&lt;p&gt;My &lt;a href=&quot;https://r.va.gg/presentations/lxjs2013&quot;&gt;slides are online&lt;/a&gt; but hopefully I&#39;ll be able to get my DailyJS article sorted out soon and I&#39;ll be able to explain what I was trying to get at.&lt;/p&gt;
&lt;p&gt;ReadStream as a primitive query mechanism is not too hard to understand once you get your head around key sorting and the implications for key structure. Batch is a little more subtle and relates to consistency and our ability to augment basic operations to create more complex functionality while keeping the data store in a consistent state.&lt;/p&gt;
&lt;p&gt;I additionally raised &quot;Buckets&quot;, or &quot;Namespaces&quot; as a primitive concept and discussed how &lt;a href=&quot;https://github.com/dominictarr/level-sublevel&quot;&gt;sublevel&lt;/a&gt; has effectively become the standard for turning a one-dimensional data store into a multi-dimensional store able to encapsulate contain sophisticated functionality behind what is essentially just a key/value store.&lt;/p&gt;
&lt;h3 id=&quot;thanks-to-the-lxjs-team&quot;&gt;Thanks to the LXJS team&lt;/h3&gt;
&lt;p&gt;It would be neglectful of me to not say how absolutely grateful I am to the LXJS team for putting so much effort into taking care of speakers; fantastic job.&lt;/p&gt;
&lt;p&gt;LXJS is an amazing event, put on by a dedicated and very talented team of people committed to the JavaScript community and the JavaScript community in Portugal in particular. This conference sets a very high bar for community-driven conferences with the way it has managed to get so many locals (and internationals!) involved in running an event in their own time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Dias, Ana Hevesi, Pedro Teixeira, Luís Reis, Nuno Job, Tiago Rodrigues, Leo Xavier, Alexander Kustov, André Rodrigues and Bruno Coelho&lt;/strong&gt; have managed to put on an amazing event and are some of the nicest and talented people I&#39;ve met. Thank you to you all and everyone else who put on LXJS 2013, your hard work is appreciated and should be an inspiration to everyone involved in our local JavaScript communities, running events or considering running events like this.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>NodeConf.eu</title>
      <link href="https://r.va.gg/2013/09/nodeconf.eu.html" />
      <updated>2013-09-27T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/09/nodeconf.eu.html</id>
      <content type="html">
        &lt;p&gt;Wow, &lt;strong&gt;&lt;a href=&quot;http://nodeconf.eu/&quot;&gt;NodeConf.eu&lt;/a&gt;&lt;/strong&gt; was certainly a once-in-a-lifetime event ... although there&#39;s talk of a repeat performance next year (don&#39;t miss the chance when it comes around!).&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://r.va.gg/images/2013/09/nodeconfeu_raiseflag.jpg&quot; alt=&quot;Raise that flag&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Dominic Tarr, @substack and Julian Gruber raising the NodeConf.eu flag&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;NodeConf.eu was held in Waterford, Ireland, on an &lt;strong&gt;Island&lt;/strong&gt;, in a &lt;strong&gt;Castle&lt;/strong&gt; and was organised by the Node lovin&#39; company, &lt;a href=&quot;http://nearform.com/&quot;&gt;nearForm&lt;/a&gt;, in particular &lt;a href=&quot;http://cianomaidin.com/&quot;&gt;Cian O&#39;Maidin&lt;/a&gt; and his amazing assistant Catherine Bradley. Of course &lt;a href=&quot;http://futurealoof.com/&quot;&gt;Mikeal Rogers&lt;/a&gt; had a significant role in organising the event too.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://r.va.gg/images/2013/09/nodeconfeu_castle.jpg&quot; alt=&quot;Waterford Castle&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://waterfordcastle.com/&quot;&gt;Waterford Castle&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://r.va.gg/images/2013/09/nodeconfeu_pig.jpg&quot; alt=&quot;Pig&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;The welcome banquet ... yep&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Instead of describing the talks, I&#39;ll defer to the &lt;a href=&quot;http://clock.co.uk/tech-blogs/nodeconfeu-2013-part-one&quot;&gt;excellent&lt;/a&gt; &lt;a href=&quot;http://clock.co.uk/tech-blogs/nodeconfeu-2013-part-two&quot;&gt;four&lt;/a&gt; &lt;a href=&quot;http://clock.co.uk/tech-blogs/nodeconfeu-2013-part-three&quot;&gt;part&lt;/a&gt; &lt;a href=&quot;http://clock.co.uk/tech-blogs/nodeconfeu-reflection&quot;&gt;series&lt;/a&gt; by Paul, Adam, Luke and Ben of &lt;a href=&quot;http://clock.co.uk/&quot;&gt;Clock&lt;/a&gt; where you&#39;ll find a great summary of the talks and events of the conference.&lt;/p&gt;
&lt;p&gt;For my part, I was deeply honoured to be involved in the &lt;em&gt;&quot;Node Databases&quot;&lt;/em&gt; track of the conference. We started off the NodeConf.eu talks with a 3-part show. My talk was titled &quot;A Real Database Rethink&quot; and was followed by &lt;a href=&quot;https://twitter.com/dominictarr&quot;&gt;Dominic Tarr&lt;/a&gt; who talked more about the Level* ecosystem and the various pieces of the Node Databases puzzle that&#39;s being built. &lt;a href=&quot;http://juliangruber.com/&quot;&gt;Julian Gruber&lt;/a&gt; then closed us off with some amazing live-coding of some browser/server streaming LevelUP/multilevel &lt;a href=&quot;https://github.com/juliangruber/nodeconfeu-13&quot;&gt;wizardry&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;a-real-database-rethink&quot;&gt;A Real Database Rethink&lt;/h3&gt;
&lt;p&gt;The slides of my talk are &lt;a href=&quot;https://r.va.gg/presentations/nodeconfeu.2013/&quot;&gt;online&lt;/a&gt;. I attempted to break down the definition of the term &lt;em&gt;&quot;database&quot;&lt;/em&gt; by looking at where the concept comes from historically. It&#39;s actually a difficult thing to define and I don&#39;t believe there is any one agreed upon meaning. What I came up with is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A tool for interacting with structured data, externalised from the core of our application&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Persistence&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Simplify access to complex data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And sometimes...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared access&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;But even that&#39;s pretty rough.&lt;/p&gt;
&lt;p&gt;Taking that definition, we can apply Node philosophy of small-core and vibrant user-land, along with the culture of extreme modularity afforded us by npm, and build a new kind of database; or at least apply new thinking to the &quot;database&quot;.&lt;/p&gt;
&lt;p&gt;The bulk of my talk was taken up with talking about LevelUP and the basics of the Level&lt;em&gt; ecosystem. There&#39;s a table on slide #7 that I&#39;m going to try and refine over time to help describe what the Level&lt;/em&gt; / NodeBase world is all about.&lt;/p&gt;
&lt;h3 id=&quot;level-me-up-scotty-&quot;&gt;Level Me Up Scotty!&lt;/h3&gt;
&lt;p&gt;One of the three workshops available at NodeConf.eu was all about Node Databases. I took the same approach as at &lt;a href=&quot;http://campjs.com/&quot;&gt;CampJS&lt;/a&gt; recently where I built &lt;a href=&quot;https://r.va.gg/2013/08/learn-you-the-node.js.html&quot;&gt;Learn You The Node.js For Much Win!&lt;/a&gt;, a tool that owes a debt to &lt;a href=&quot;https://github.com/substack/stream-adventure&quot;&gt;stream-adventure&lt;/a&gt;, a self-guided workshop-in-your-terminal application by &lt;a href=&quot;https://twitter.com/substack&quot;&gt;@substack&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/maxogden&quot;&gt;Max Ogden&lt;/a&gt; written for NodeConf (US).&lt;/p&gt;
&lt;p&gt;This time around, I received some great help from both @substack and Julian Gruber who helped write some exercises, I also received help from &lt;a href=&quot;http://twitter.com/eugeneware&quot;&gt;Eugene Ware&lt;/a&gt; who wasn&#39;t even at the conference but was assisting with development from Australia. &lt;a href=&quot;http://twitter.com/raynos2&quot;&gt;Raynos&lt;/a&gt; was also a great help in getting the application working well.&lt;/p&gt;
&lt;p&gt;We ended up with &lt;strong&gt;&lt;em&gt;Level Me Up Scotty!&lt;/em&gt;&lt;/strong&gt;, or just &lt;strong&gt;levelmeup&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://raw.github.com/rvagg/levelmeup/master/levelmeup.png&quot; alt=&quot;levelmeup&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Dominic Tarr, &lt;a href=&quot;https://twitter.com/thlorenz&quot;&gt;Thorsten Lorenz&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/hij1nx&quot;&gt;Paolo Fragomeni&lt;/a&gt;, &lt;a href=&quot;http://www.matteocollina.com/&quot;&gt;Matteo Collina&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ralphtheninja&quot;&gt;Magnus Skog&lt;/a&gt;, Max Ogden and other experienced &lt;em&gt;Levelers&lt;/em&gt; helped on and off while the workshops were happening; so we had plenty of expertise at hand whenever there were questions.&lt;/p&gt;
&lt;p&gt;Workshops were unstructured and the organisers of each workshop all ended up agreeing that we should just let people come and go as they pleased. This suited us as the workshop was open-ended and designed not to be finished by most people within the originally planned hour &lt;em&gt;(I think that was the original plan)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/levelmeup&quot;&gt;levelmeup&lt;/a&gt;&lt;/strong&gt; is installed from npm (&lt;code&gt;npm install levelmeup -g&lt;/code&gt;) and is fully self-guided. You run the &lt;code&gt;levelmeup&lt;/code&gt; application and it steps you through some exercises designed to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;introduce you to the format of the workshops with a simple &quot;Hello World&quot; style exercise&lt;/li&gt;
&lt;li&gt;introduce you to LevelUP and its basic operations&lt;/li&gt;
&lt;li&gt;help you understand ReadStream and the range-queries it makes possible&lt;/li&gt;
&lt;li&gt;encourage creative thought regarding key structure&lt;/li&gt;
&lt;li&gt;introduce &lt;a href=&quot;https://github.com/dominictarr/level-sublevel&quot;&gt;sublevel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;introduce &lt;a href=&quot;https://github.com/juliangruber/multilevel&quot;&gt;multilevel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&#39;s more planned for the future of this workshop application too, Matteo even has an a &lt;a href=&quot;https://github.com/rvagg/levelmeup/pull/19&quot;&gt;work-in-progress exercise&lt;/a&gt; that should be merged fairly soon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://nodeschool.io/&quot;&gt;nodeschool.io&lt;/a&gt;&lt;/strong&gt; was hatched from NodeConf.eu and pulls together the three workshop applications currently available in npm. I believe this was an initiative of &lt;a href=&quot;https://twitter.com/brianloveswords&quot;&gt;Brian J. Brennan&lt;/a&gt; and other Mozillans on the &lt;a href=&quot;http://openbadges.org/&quot;&gt;Open Badges&lt;/a&gt; project. &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/workshopper&quot;&gt;workshopper&lt;/a&gt;&lt;/strong&gt; is the engine that runs both learnyounode and levelmeup and we&#39;re trying to make it even easier for others to author their own workshop applications. There is already a &lt;a href=&quot;https://github.com/timoxley/functional-javascript-workshop/&quot;&gt;Functional Javacript Workshop&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/secoif&quot;&gt;Tim Oxley&lt;/a&gt; and there are more in development. Exciting times!&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://r.va.gg/images/2013/09/nodeconfeu_levelmeup.jpg&quot; alt=&quot;Level Me Up Workshoppers&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Workshoppers stretching their brains with &lt;strong&gt;levelmeup&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;My experience with &lt;strong&gt;stream-adventure&lt;/strong&gt; and &lt;strong&gt;learnyounode&lt;/strong&gt; suggested that this format should prove to be relatively successful but ultimately I think we had most of the attendees come through at some point and sit down to have a crack at the workshop. This is particularly impressive given that &lt;a href=&quot;http://nexxylove.tumblr.com/&quot;&gt;Emily Rose&lt;/a&gt;, &lt;a href=&quot;http://tmpvar.com/&quot;&gt;Elijah Insua&lt;/a&gt; and Matteo were running a NodeBots workshop which included Arduino and NodeCopter hacking (always popular!). And &lt;a href=&quot;https://twitter.com/mrbruning&quot;&gt;Max Bruning&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/tjfontaine&quot;&gt;TJ Fontaine&lt;/a&gt; were running a Manta / MDB / DTrace / SmartOS-magic workshop and their material was some of my favourite from NodeConf (US) so I&#39;m sure people really enjoyed what they had to present.&lt;/p&gt;
&lt;p&gt;Unfortunately I didn&#39;t get to attend these other workshops, I also missed out on some skeet!&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://farm6.staticflickr.com/5338/9726258926_e3ea4a656f_z.jpg&quot; alt=&quot;Skeet&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Karolina &lt;em&gt;&quot;don&#39;t mess with me&quot;&lt;/em&gt; Szczur, photo by &lt;a href=&quot;http://www.flickr.com/photos/matthewbergman/sets/72157635446400980/&quot;&gt;Matthew Bergman&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;But there was plenty of other &lt;em&gt;experience&lt;/em&gt; to be had. It was also fantastic to meet so many people I only knew from IRC / Twitter / GitHub. For someone who lives in regional Australia and doesn&#39;t get a chance to socialise much with other nerds, this was a particularly special opportunity.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://farm8.staticflickr.com/7392/9783982165_43ca4edef2_z.jpg&quot; alt=&quot;Shenanigans&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Final night banquet shenanigans with &lt;a href=&quot;https://twitter.com/Av1anFlu&quot;&gt;Charlie McConnell&lt;/a&gt; and @substack ... the napkin hat thing is a story in itself, blame &lt;a href=&quot;https://twitter.com/jllord&quot;&gt;Jessica Lord&lt;/a&gt;, photo by &lt;a href=&quot;http://www.flickr.com/photos/matthewbergman/sets/72157635446400980/&quot;&gt;Matthew Bergman&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-level-gang&quot;&gt;The Level* Gang&lt;/h3&gt;
&lt;p&gt;As an aside, NodeConf.eu had the largest concentration of LevelUP contributors and active Level* developers of any event that I&#39;m aware of so far. So we took the opportunity to have our own little meeting. We even took minutes, &lt;a href=&quot;https://github.com/karolinaszczur/leveldb.org/blob/master/meetup-nodeland&quot;&gt;of sorts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There has been a long-standing plan to make a Level* / NodeBase website but being the disorganised rabble we are, it hasn&#39;t got off the ground. Karolina (and Jessica too I believe) are keen to help out on the design end but just need the content. So that&#39;s what we planned. There&#39;s a bunch of issues that form a TODO in the &lt;a href=&quot;https://github.com/karolinaszczur/leveldb.org/issues&quot;&gt;repo&lt;/a&gt; for this project. Hopefully we can all get on top of it sooner rather than later. We&#39;re also open to assistance from anyone else that would like to contribute.&lt;/p&gt;
&lt;p&gt;Besides getting stuff done, it was just a pleasure to hang out with these people and talk &lt;em&gt;shop&lt;/em&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;https://r.va.gg/images/2013/09/nodeconfeu_levelgang.jpg&quot; alt=&quot;A momentus event&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;The Level* Gang&lt;/strong&gt;: Paolo, Dominic, @substack, Karolina, Magnus, Mikeal, Julian, Max, Matteo and &lt;a href=&quot;https://twitter.com/paulfryzel&quot;&gt;Paul Fryzel&lt;/a&gt;. Raynos was around but missed this particular &lt;em&gt;event&lt;/em&gt;, Thorsten was inside demoing his guitar-typing software.&lt;/p&gt;
&lt;/div&gt;


      </content>
    </entry>
  
    <entry>
      <title>Learn You The Node.js</title>
      <link href="https://r.va.gg/2013/08/learn-you-the-node.js.html" />
      <updated>2013-08-14T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/08/learn-you-the-node.js.html</id>
      <content type="html">
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://campjs.com/&quot;&gt;CampJS&lt;/a&gt;&lt;/strong&gt; has just finished, with a bigger crowd than last time around. It was lots of fun, and as usual, these events are more about meeting the people I collaborate, and socialise with online than anything else. There was a particularly large turn-out of the hackers on #polyhack, our Australian programmers channel on Freenode. Even &lt;a href=&quot;https://twitter.com/mwotton&quot;&gt;@mwotton&lt;/a&gt;, our resident Haskell-troll was there! Lots of photos and news can be found on &lt;a href=&quot;http://storify.com/campjs/campjs-ii&quot;&gt;Storify&lt;/a&gt;. The next one will likely be near Melbourne in February some time and I highly recommend it if you can get there.&lt;/p&gt;
&lt;h3 id=&quot;learn-you-the-node-js-for-much-win-presentation-&quot;&gt;Learn You The Node.js For Much Win (presentation)&lt;/h3&gt;
&lt;p&gt;I was struck last CampJS how many JavaScript newbies were there, or at least people who deal with JavaScript as a secondary language and therefore only have a cursory understanding of it. And by extension, there were not many people who had much understanding of Node. So I wanted to present some intro-to-Node material this time.&lt;/p&gt;
&lt;p&gt;I gave a 30 minute talk covering the very basics of &lt;em&gt;what Node &lt;strong&gt;is&lt;/strong&gt;&lt;/em&gt;, called &lt;strong&gt;Learn You The Node.js For Much Win&lt;/strong&gt;. Obviously the title is inspired by &lt;em&gt;&lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell For Great Good&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://learnyousomeerlang.com/&quot;&gt;Learn You Some Erlang For Great Good&lt;/a&gt;&lt;/em&gt;. You can find my slides &lt;a href=&quot;https://r.va.gg/presentations/campjs-learn-you-node/&quot;&gt;here&lt;/a&gt; (feel free to rip them off if you need to give a similar talk somewhere!). The video may be online at some point in the future.&lt;/p&gt;
&lt;h3 id=&quot;learn-you-the-node-js-for-much-win-workshop-&quot;&gt;Learn You The Node.js For Much Win (workshop)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/BRWaBeeCcAA9R7v.jpg&quot; style=&quot;border-radius:4px; border: solid 2px white; box-shadow: 1px 1px 15px rgba(0,0,0,0.4);&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next morning, I gave a workshop on the same topic but it was much more hands-on. The inspiration for my workshop came from &lt;a href=&quot;http://www.nodeconf.com/&quot;&gt;NodeConf&lt;/a&gt;, a couple of months earlier. &lt;a href=&quot;https://twitter.com/substack&quot;&gt;@substack&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/maxogden&quot;&gt;@maxogden&lt;/a&gt; presented a workshop titled &lt;strong&gt;stream adventure&lt;/strong&gt; which was a self-guided, interactive workshop for the terminal, built with Node. You can find it &lt;a href=&quot;https://github.com/substack/stream-adventure&quot;&gt;here&lt;/a&gt; and install it from npm with &lt;code&gt;npm install stream-adventure -g&lt;/code&gt;, I highly recommend it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/stream-adventure/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/stream-adventure.png?downloads=true&amp;stars=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was so inspired that I stole their code and made my own workshop application! &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/learnyounode/&quot;&gt;learnyounode&lt;/a&gt;&lt;/strong&gt;. You can download and install it with &lt;code&gt;npm install learnyounode -g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/learnyounode/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/learnyounode.png?downloads=true&amp;stars=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The application itself is/was a series of 13 separate workshops. Starting off with a simple &lt;em&gt;HELLO WORLD&lt;/em&gt; and ending with a JSON API HTTP server (contributed by the very clever &lt;a href=&quot;https://twitter.com/sidorares&quot;&gt;@sidorares&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/rvagg/learnyounode/master/learnyounode.png&quot; alt=&quot;learnyounode&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nobody actually managed to finish the workshops in the allotted 60 minutes, although &lt;a href=&quot;http://twitter.com/alexdickson&quot;&gt;@alexdickson&lt;/a&gt;, an expert JavaScripter but Node-n00b was the first one I heard of finishing it not long after.&lt;/p&gt;
&lt;p&gt;The workshops attempt to focus on some of the core concepts of Node. There&#39;s lots of console output because that&#39;s easiest to validate but it introduces filesystem I/O, both synchronous and asynchronous and moves straight on to networking because that&#39;s what Node is so good at. An &lt;em&gt;HTTP CLIENT&lt;/em&gt; example, introduces HTTP and is expanded on in &lt;em&gt;HTTP COLLECT&lt;/em&gt; which introduces streams. &lt;em&gt;JUGGLING ASYNC&lt;/em&gt; builds on &lt;em&gt;HTTP COLLECT&lt;/em&gt; to introduce the complexities of managing parallel asynchronous activities. From there, it switches from network clients to network servers, first a simple TCP server in &lt;em&gt;TIME SERVER&lt;/em&gt; and then using streams to serve files in &lt;em&gt;HTTP FILE SERVER&lt;/em&gt; and transforming data with &lt;em&gt;HTTP UPPERCASERER&lt;/em&gt;. The final exercise presents you with a more complex, closer-to-real-world example, an HTTP API server with multiple end-points.&lt;/p&gt;
&lt;p&gt;The entire workshop is designed to take longer than 1-hour, people ought to be able ot take it away and complete it later. It&#39;s also designed to be suitable for complete n00bs and also people with some experience, it ought to make a fun challenge for anyone already experienced with Node to see how quickly they can complete the examples (I believe I earned the honour of being the first person at NodeConf to finish stream-adventure in the allotted time!).&lt;/p&gt;
&lt;p&gt;The Node-experts at CampJS were thankfully helping out during the workshop so there wasn&#39;t much competition going on there.&lt;/p&gt;
&lt;p&gt;Many thanks to these expert Node nerds who hovered and helped people during the workshop and also did some test-driving of the workshop prior to the event:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/nicholasf&quot;&gt;Nicholas Faiz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/cgiffard&quot;&gt;Christopher Giffard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/secoif&quot;&gt;Tim Oxley&lt;/a&gt; (who also poured his heart and soul into organising CampJS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/deoxxa&quot;&gt;Conrad Pankoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/sidorares&quot;&gt;Andrey Sidorov&lt;/a&gt; (who also contributed the final exercise of the workshop)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/EugeneWare&quot;&gt;Eugene Ware&lt;/a&gt; (who was also brilliant all weekend, running the local &lt;a href=&quot;http://en.wikipedia.org/wiki/Sneakernet&quot;&gt;sneakernet&lt;/a&gt; because the network was so flakey)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(I really hope I haven&#39;t missed anyone out there; so many quality nerds at CampJS!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-tKp0U1N7XNw/UgngKk01qqI/AAAAAAAAAoc/xxAOCTqMCZ0/w600-h800-no/campJS+%252870+of+118%2529.jpg&quot; style=&quot;border-radius:4px; border: solid 2px white; box-shadow: 1px 1px 15px rgba(0,0,0,0.4);&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tim Oxley making a contribution during the workshop, along with Christopher Giffard (left) and Eugene Ware (right)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had the &lt;a href=&quot;https://r.va.gg/presentations/campjs-learn-you-node/workshop.html&quot;&gt;solutions&lt;/a&gt; to the workshop ready on the big-screen and walked through some of the early solutions and talked through what was going on. I didn&#39;t expect many people to listen to those bits and the workshop was designed so you could totally zone-out and do it at your own pace if that suited.&lt;/p&gt;
&lt;p&gt;If anyone wants to run a similar style workshop for their local meet-up, using the same content, I&#39;d love to receive contributions to &lt;strong&gt;learnyounode&lt;/strong&gt;. Alternatively, make your own! I extracted the core framework from &lt;strong&gt;learnyounode&lt;/strong&gt; and it now lives separately as &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/workshopper&quot;&gt;workshopper&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/workshopper/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/workshopper.png?downloads=true&amp;stars=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would love feedback from anyone in attendance or anyone that uses this tool to run their own workshops! &lt;strong&gt;learnyounode&lt;/strong&gt; is already listed in Max Ogden&#39;s excellent &lt;strong&gt;&lt;a href=&quot;https://github.com/maxogden/art-of-node&quot;&gt;The Art of Node&lt;/a&gt;&lt;/strong&gt;, so I&#39;m looking forward to contributions to help turn this into a really useful teaching tool.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDOWN Alternatives</title>
      <link href="https://r.va.gg/2013/06/leveldown-alternatives.html" />
      <updated>2013-06-07T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/06/leveldown-alternatives.html</id>
      <content type="html">
        &lt;p&gt;Since &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt;&lt;/strong&gt; v0.9, &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/strong&gt; has been an optional dependency, allowing you to switch in alternative back-ends.&lt;/p&gt;
&lt;p&gt;We have &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-memdown&quot;&gt;MemDOWN&lt;/a&gt;&lt;/strong&gt;, a pure in-memory data-store, allowing you to run LevelUP against transient, and very fast storage.&lt;/p&gt;
&lt;p&gt;We also have &lt;strong&gt;&lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;level.js&lt;/a&gt;&lt;/strong&gt; which works against &lt;strong&gt;IndexedDB&lt;/strong&gt;, allowing you to run LevelUP in the browser!&lt;/p&gt;
&lt;p&gt;Since LevelUP just needs some basic primitives and a sorted bi-directional iterator, we can swap out the back-end with numerous alternatives.&lt;/p&gt;
&lt;p&gt;The easy targets are the forks of LevelDB that purport to &lt;em&gt;fix&lt;/em&gt; or &lt;em&gt;improve&lt;/em&gt; LevelDB in some way. I have another post brewing on what I think about the claims made in this area and how we ought to approach them, but that can come later. For now I have some packages in npm for you to try for yourself!&lt;/p&gt;
&lt;h2 id=&quot;basho&quot;&gt;Basho&lt;/h2&gt;
&lt;p&gt;First of all we have &lt;strong&gt;leveldown-basho&lt;/strong&gt; which bundles the &lt;a href=&quot;https://github.com/basho/leveldb&quot;&gt;Basho LevelDB fork&lt;/a&gt; into LevelDOWN. See Matthew Von-Maszewski&#39;s &lt;a href=&quot;https://speakerdeck.com/basho/optimizing-leveldb-for-performance-and-scale-ricon-east-2013&quot;&gt;slides&lt;/a&gt; from the recent Ricon East 2013 for more information on what they&#39;ve tried to do with LevelDB.&lt;/p&gt;
&lt;p&gt;In summary, Basho&#39;s aim is to optimise LevelDB &quot;for the server&quot;, particularly for high write throughput. They use &gt;1 compaction threads and relax the rules a little on overlapping keys for the lower levels. Plus a few other things that I won&#39;t get in to here.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install levelup leveldown-basho
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;levelup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;leveldown-basho&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// go to work on `db`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: some of the LevelDOWN and LevelUP tests are failing on the current build for this release, although I don&#39;t believe they should impact on standard usage but your mileage may vary...&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;hyperdex&quot;&gt;HyperDex&lt;/h2&gt;
&lt;p&gt;Next, we have &lt;strong&gt;leveldown-hyper&lt;/strong&gt;, which bundles a fork by the people behind &lt;a href=&quot;http://hyperdex.org/&quot;&gt;HyperDex&lt;/a&gt;, a key-value store. Again their aim is to optimise LevelDB for a server environment. You can see some of their claims about performance &lt;a href=&quot;http://hyperdex.org/performance/leveldb/&quot;&gt;here&lt;/a&gt;. I don&#39;t know as much about this fork, I&#39;ll investigate further when I have time, but they are also using multiple compaction threads to do the background work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install levelup leveldown-hyper
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;levelup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;leveldown-hyper&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveldown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// go to work on `db`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;-i-strike-lies-strike-i-benchmarks-&quot;&gt;&lt;i&gt;&lt;strike&gt;Lies!&lt;/strike&gt;&lt;/i&gt; Benchmarks!&lt;/h2&gt;
&lt;p&gt;OK, benchmarks kind of suck, particularly microbenchmarks. It&#39;s really hard to test something that&#39;s meaningful for everyone&#39;s use-case. But you can make pretty pictures with them and they can tell something of a story, even if it&#39;s just the first page of a novel.&lt;/p&gt;
&lt;p&gt;So here we go. I&#39;ve put together a simplistic benchmark that tries to test the kind of situation that these two forks are aiming to optimise for. In particular, high-throughput writes. There&#39;s a common claim that LevelDB has problems with writes because the compaction thread can hold up levels 0 and 1 while it&#39;s working on higher levels; and you really want to be flushing the new data as soon as possible so you can get more in. (Again, I have more to say on this &amp; the claims about &quot;fixing&quot; the problem in a later post).&lt;/p&gt;
&lt;p&gt;I have a sorted-write benchmark in the &lt;a href=&quot;https://github.com/rvagg/node-leveldown/tree/master/bench&quot;&gt;LevelDOWN repo&lt;/a&gt; that tries to push in 10M pre-sorted entries as fast as possible, fully utilising Node&#39;s worker-threads for the job. So this isn&#39;t your typical browser scenario. An important point here is that &lt;strong&gt;Node is a unique environment when looking at LevelDB performance&lt;/strong&gt;. It&#39;s not going to be a straightforward mapping of benchmark results obtained with other LevelDB bindings onto what we can achieve in Node.&lt;/p&gt;
&lt;p&gt;Because there are so many entries, instead of recording the time for individual writes, I&#39;ve recorded average time for batches of 1000 writes. Below you can see what the write-times look like when plotted over time. There are a bunch of outliers that are above the maximum Y of 0.6ms, but not enough to warrant distracting from the interesting behaviour below 0.6ms so I chopped it off there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It is important to note that I&#39;m using the default options&lt;/strong&gt; here and this is where I&#39;ll probably cop some flak. Basho in particular advocate a healthy amount of &quot;tuning&quot; to achieve appropriate performance. In particular the write-buffer defaults to only 4M and you can push data in faster (at the cost of compactions later on) by increasing this. I think the forks may even have additional tunables of their own that you can fiddle with. But, this whole tuning thing is a rabbit hole I don&#39;t dare go down right now!&lt;/p&gt;
&lt;p&gt;I&#39;m running this on an i7-2630QM CPU, plenty of RAM and an SSD.&lt;/p&gt;
&lt;p&gt;You can see that we managed to push in the 10M entries in just over 95 seconds with the plain &lt;strong&gt;Google LevelDB (v1.10.0)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://r.va.gg/images/2013/06/write_sorted_times_g.png&quot; height=500 width=800 align=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Next up we have the HyperDex fork. The main difference here is that we have it working slightly faster in total and the write-times have been trimmed down a bit to be more consistent. Not a bad effort with default settings, quite a nice picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://r.va.gg/images/2013/06/write_sorted_times_h.png&quot; height=500 width=800 align=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Lastly we can see what Basho have done. They&#39;ve been on this case for a lot longer than HyperDex have and their fork, internally at least, diverges quite a bit from Google&#39;s LevelDB.&lt;/p&gt;
&lt;p&gt;We can see that the write-time has been considerably flattened; which is in line with what Basho claim and are aiming for, the consistency here is &lt;strong&gt;very&lt;/strong&gt; impressive. Unfortunately we&#39;ve ended up with a total time that is &lt;strong&gt;double&lt;/strong&gt; what it took Google&#39;s LevelDB to get the 10M entries in!&lt;/p&gt;
&lt;p&gt;No doubt this is probably something to do with the tunables, or perhaps I&#39;ve messed something up, anything&#39;s possible!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://r.va.gg/images/2013/06/write_sorted_times_b.png&quot; height=500 width=800 align=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;so-&quot;&gt;So?&lt;/h2&gt;
&lt;p&gt;If you take anything away from this, here&#39;s what I think it should be: &lt;strong&gt;Do your own benchmarks if performance &lt;em&gt;really&lt;/em&gt; is an issue for you&lt;/strong&gt;. You&#39;re going to need some kind of benchmark suite that is tailored to your particular application. This will not only let you choose the appropriate storage system but it will give you something to work with when you start to get in to the mire that is &quot;tunables&quot;.&lt;/p&gt;
&lt;p&gt;It&#39;s likely I won&#39;t be able to leave this alone and will be posting more benchmarks with some tweaking and tuning. I&#39;d love to have input from others on this too of course! The code for this is all in the LevelDOWN repo with both of these forks under appropriately named branches.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelUP v0.9 Released</title>
      <link href="https://r.va.gg/2013/05/levelup-v0.9-released.html" />
      <updated>2013-05-21T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/05/levelup-v0.9-released.html</id>
      <content type="html">
        &lt;p&gt;&lt;img src=&quot;https://twimg0-a.akamaihd.net/profile_images/3360574989/92fc472928b444980408147e5e5db2fa_bigger.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;As per my &lt;a href=&quot;https://r.va.gg/2013/05/levelup-v0.9-some-major-changes.html&quot;&gt;previous post&lt;/a&gt;, &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; v0.9 has been released&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;I&#39;m doing a quick post about this release because it&#39;s got more changes in it than we normally see, including some things worth explaining.&lt;/p&gt;
&lt;h3 id=&quot;relationship-to-leveldown&quot;&gt;Relationship to LevelDOWN&lt;/h3&gt;
&lt;p&gt;The biggest change is the removal of &lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt; as a dependency, you should &lt;a href=&quot;https://r.va.gg/2013/05/levelup-v0.9-some-major-changes.html&quot;&gt;review what I&#39;ve already said about this&lt;/a&gt; as this will impact you if you&#39;re currently using LevelUP. In short, you&#39;ll either need to explicitly &lt;code&gt;npm install leveldown&lt;/code&gt; or switch to using the new &lt;a href=&quot;https://github.com/level/level&quot;&gt;Level&lt;/a&gt; package which bundles them both.&lt;/p&gt;
&lt;p&gt;Along with this change, we also get better &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; support. See &lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;level.js&lt;/a&gt; for more information on this.&lt;/p&gt;
&lt;h3 id=&quot;chained-batch&quot;&gt;Chained batch&lt;/h3&gt;
&lt;p&gt;The other major change is the introduction of a new &lt;strong&gt;chained batch&lt;/strong&gt; syntax, additional to the existing batch syntax. This method of creating and writing batch operations is much closer to the way LevelDB does batches and under certain circumstances you may find improved performance from using this method.&lt;/p&gt;
&lt;p&gt;If you call &lt;code&gt;db.batch()&lt;/code&gt; with no arguments, you&#39;ll get a &lt;code&gt;Batch&lt;/code&gt; object back which has the following operations: &lt;code&gt;put()&lt;/code&gt;, &lt;code&gt;del()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;. The first three are chainable so you can call them one after the other to build your batch. &lt;code&gt;write()&lt;/code&gt; is the only method that takes a callback because it submits the batch. Until you call &lt;code&gt;write()&lt;/code&gt;, the batch is transient and can be discarded.&lt;/p&gt;
&lt;p&gt;Example from the &lt;a href=&quot;https://github.com/rvagg/node-levelup#readme&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;father&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yuri Irsenovich Kim&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dob&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;16 February 1941&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;spouse&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Kim Young-sook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;occupation&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Clown&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Done!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;some-love-for-writestream&quot;&gt;Some love for WriteStream&lt;/h3&gt;
&lt;p&gt;WriteStream got some attention in this release. On the main &lt;code&gt;createWriteStream()&lt;/code&gt; method and on individual &lt;code&gt;write()&lt;/code&gt; calls, you can now pass some new options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;type&#39;&lt;/code&gt; can switch from the default &lt;code&gt;&#39;put&#39;&lt;/code&gt; to &lt;code&gt;&#39;del&#39;&lt;/code&gt; so you can make a WriteStream that only deletes when you &lt;code&gt;write({ key: &#39;foo&#39; })&lt;/code&gt;, or you can make individual writes delete: &lt;code&gt;write({ type: &#39;del&#39;, key: &#39;foo&#39; })&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;keyEncoding&#39;&lt;/code&gt; and &lt;code&gt;&#39;valueEncoding&#39;&lt;/code&gt; will switch from default encodings for the current LevelUP instance. Again, you can specify them on the main &lt;code&gt;createWriteStream()&lt;/code&gt; or on individual &lt;code&gt;write()&lt;/code&gt; calls.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other-changes&quot;&gt;Other changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/rvagg/node-levelup/pull/128&quot;&gt;race condition&lt;/a&gt; was fixed that allowed a &lt;code&gt;put()&lt;/code&gt; to write to the store before an iterator was obtained when calling `createReadStream().&lt;/li&gt;
&lt;li&gt;ReadStream no longer emits a &lt;code&gt;&#39;ready&#39;&lt;/code&gt; event.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;db&lt;/code&gt; property on LevelUP instances can be used to get access to LevelDOWN or whatever LevelDOWN-substitute you are using (this was &lt;code&gt;_db&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Some very LevelDB-specific methods have been deprecated on LevelUP and the documentation now recommends either directly using LevelDOWN or calling via the &lt;code&gt;db&lt;/code&gt; property. Specifically:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db.db.approximateSize()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leveldown.repair()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leveldown.destroy()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LevelDOWN got a new LevelDB method: &lt;code&gt;getProperty()&lt;/code&gt; that currently understands 3 properties:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db.db.getProperty(&#39;leveldb.num-files-at-levelN&#39;)&lt;/code&gt;: returns the number of files at level &lt;em&gt;N&lt;/em&gt;, where N is an integer representing a valid level (e.g. &quot;0&quot;)&#39;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.db.getProperty(&#39;leveldb.stats&#39;)&lt;/code&gt;: returns a multi-line string describing statistics about LevelDB&#39;s internal operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.db.getProperty(&#39;leveldb.sstables&#39;)&lt;/code&gt;: returns a multi-line string describing all of the &lt;em&gt;sstables&lt;/em&gt; that make up contents of the current database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Significantly improved ReadStream performance improvements (up to 50% faster).&lt;/li&gt;
&lt;li&gt;Some LevelDOWN memory leaks discovered and fixed.&lt;/li&gt;
&lt;li&gt;LevelDOWN upgraded to LevelDB@1.10.0, &lt;a href=&quot;https://groups.google.com/forum/#!topic/node-levelup/bly-MiUzrZw&quot;&gt;details here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;who-you-should-thank&quot;&gt;Who you should thank&lt;/h3&gt;
&lt;p&gt;A lot of people put in work to this release. There&#39;s a &lt;a href=&quot;https://github.com/rvagg/node-levelup#contributors&quot;&gt;team of people&lt;/a&gt; that can claim ownership of LevelUP, LevelDOWN and related projects and most of them have been involved in this release. You should follow these people on Twitter and GitHub!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dominic Tarr&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dominictarr&quot;&gt;GitHub/dominictarr&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/dominictarr&quot;&gt;Twitter/@dominictarr&lt;/a&gt;) contributed to the ReadStream fixes and is just a generally valuable &amp; awesome sage in the LevelDB + Node community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Julian Gruber&lt;/strong&gt; (&lt;a href=&quot;https://github.com/juliangruber&quot;&gt;GitHub/juliangruber&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/juliangruber&quot;&gt;Twitter/@juliangruber&lt;/a&gt;) contributed the encoding options for WriteStreams and most of the work on the new chained &lt;code&gt;batch()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Matteo Collina&lt;/strong&gt; (&lt;a href=&quot;https://github.com/mcollina&quot;&gt;GitHub/mcollina&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/matteocollina&quot;&gt;Twitter/@matteocollina&lt;/a&gt;) contributed the &lt;code&gt;&#39;type&#39;&lt;/code&gt; options for WriteStreams and most of the work on performance improvements to ReadStreams.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;David Björklund&lt;/strong&gt; (&lt;a href=&quot;https://github.com/kesla&quot;&gt;GitHub/kesla&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/david_bjorklund&quot;&gt;Twitter/@david_bjorklund&lt;/a&gt;) also contributed work on ReadStream performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Ogden&lt;/strong&gt; (&lt;a href=&quot;https://github.com/maxogden&quot;&gt;GitHub/maxogden&lt;/a&gt; / &lt;a href=&quot;http://twitter.com/maxogden&quot;&gt;Twitter/@maxogden&lt;/a&gt;) and &lt;strong&gt;Anton Whalley&lt;/strong&gt; (&lt;a href=&quot;https://github.com/No9&quot;&gt;GitHub/No9&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/antonwhalley&quot;&gt;Twitter/@antonwhalley&lt;/a&gt;) both worked on extracting most of the LevelDOWN test suite into &lt;a href=&quot;https://github.com/rvagg/node-abstract-leveldown&quot;&gt;AbstractLevelDOWN&lt;/a&gt; to form a LevelDOWN-spec that&#39;s also runnable in browser environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And others, who you can find in &lt;a href=&quot;https://github.com/rvagg/node-levelup/pull/129&quot;&gt;this 0.9 WIP thread&lt;/a&gt;, plus additional users who reported &amp; found issues.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelUP v0.9 - Some Major Changes</title>
      <link href="https://r.va.gg/2013/05/levelup-v0.9-some-major-changes.html" />
      <updated>2013-05-20T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/05/levelup-v0.9-some-major-changes.html</id>
      <content type="html">
        &lt;p&gt;&lt;img src=&quot;https://twimg0-a.akamaihd.net/profile_images/3360574989/92fc472928b444980408147e5e5db2fa_bigger.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; is still quite young and bound to go through some major shifts. It&#39;s best to not be too tied to immature APIs early in a project&#39;s lifetime.&lt;/p&gt;
&lt;p&gt;That said, we&#39;re very interested in stability so we try to keep breaking changes to a minimum. However, we&#39;re about to publish version 0.9 and there&#39;s one change that&#39;s not exactly a &quot;breaking&quot; change in the normal sense, but it is something that I need to explain because it will impact on almost everyone currently using LevelUP.&lt;/p&gt;
&lt;h3 id=&quot;severing-the-dependency-on-leveldown&quot;&gt;Severing the dependency on LevelDOWN&lt;/h3&gt;
&lt;p&gt;LevelUP depends on &lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt; to do its &lt;em&gt;LevelDB thing&lt;/em&gt;. LevelDOWN was once part of LevelUP until we split it off to a discrete project that focuses entirely on acting as a direct C++ bridge between LevelDB and Node. We get to focus on making LevelUP an awesome LevelDB-ish interface without being tied directly to LevelDB implementation details (e.g. Iterators vs Streams).&lt;/p&gt;
&lt;p&gt;In fact, a new project was spawned to define the LevelDOWN interface that LevelUP requires. &lt;a href=&quot;https://github.com/rvagg/node-abstract-leveldown&quot;&gt;AbstractLevelDOWN&lt;/a&gt; is a set of strict tests for the functionality that LevelUP uses and it also implements a basic abstract shell that can be extended to create additional back-ends for LevelUP.&lt;/p&gt;
&lt;p&gt;So far, there are 3 projects worth mentioning that extend AbstractLevelDOWN:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;level.js&lt;/a&gt;&lt;/strong&gt; operates on top of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB&quot;&gt;IndexedDB&lt;/a&gt; (which is in turn implemented on top of &lt;a href=&quot;https://code.google.com/p/leveldb/&quot;&gt;LevelDB&lt;/a&gt; in Chrome!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/No9/node-leveldown-gap&quot;&gt;leveldown-gap&lt;/a&gt;&lt;/strong&gt; is another browser implementation that uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Storage#localStorage&quot;&gt;localStorage&lt;/a&gt; and is designed to be able to work in &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt; applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-memdown&quot;&gt;MemDOWN&lt;/a&gt;&lt;/strong&gt; is a pure in-memory implementation that doesn&#39;t touch the disk. It&#39;s obviously not good for persistent data but sometimes that&#39;s not what you need.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plus some other efforts to adapt other embedded and non-embedded data stores to the LevelDOWN interface. Additionally, there are other versions of LevelDB that can be used, including the fork that &lt;a href=&quot;http://basho.com/&quot;&gt;Basho&lt;/a&gt; maintains for use in &lt;a href=&quot;http://basho.com/riak/&quot;&gt;Riak&lt;/a&gt;. (I have a branch of LevelDOWN that uses this version of LevelDB that I&#39;ll release as soon as I can explain and demonstrate the performance differences to vanilla LevelDB for Node users).&lt;/p&gt;
&lt;p&gt;In short, LevelUP doesn&#39;t &lt;em&gt;need&lt;/em&gt; LevelDOWN in the way it once did and LevelUP is turning into a more generic interface to sorted key/value storage systems, albeit with a distinct LevelDB-flavour.&lt;/p&gt;
&lt;p&gt;Since version 0.8 we&#39;ve supported a &lt;code&gt;&#39;db&#39;&lt;/code&gt; option when you create a LevelUP instance. This option can be used to provide an alternative LevelDOWN-compatible back-end. Unfortunately, LevelDOWN being defined as a strict dependency of LevelUP means that each time you install it you have to compile LevelDOWN, even if you don&#39;t want it. So, we&#39;ve removed it as a dependency but it&#39;s still &lt;em&gt;wired up&lt;/em&gt; so that that the only thing you need to do is actually install LevelDOWN alongside LevelUP and it&#39;ll take care of the rest.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install levelup leveldown
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From version 0.9 onwards, you&#39;ll need to do this, or you&#39;ll see an (informative) error.&lt;/p&gt;
&lt;h3 id=&quot;introducing-level-&quot;&gt;Introducing &quot;Level&quot;&lt;/h3&gt;
&lt;p&gt;To make life easier, we&#39;re publishing an additional package in npm that will make this easier by bundling both LevelUP and LevelDOWN as dependencies and exposing LevelUP directly. The &lt;strong&gt;&lt;a href=&quot;https://github.com/level/level&quot;&gt;Level&lt;/a&gt;&lt;/strong&gt; package is a very simple wrapper that exists purely as a convenience. It&#39;ll track the same versioning as LevelUP so it&#39;s a straight substitution.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install level
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can simply change your &lt;code&gt;&quot;dependencies&quot;&lt;/code&gt; from &lt;strong&gt;&quot;levelup&quot;&lt;/strong&gt; to &lt;strong&gt;&quot;level&quot;&lt;/strong&gt;, plus you can use it just like LevelUP:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./my.db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;yay!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;it works!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;switching-things-up&quot;&gt;Switching things up&lt;/h3&gt;
&lt;p&gt;Now we have a properly pluggable back-end, expect to see a growing array of choice and innovation. The most exciting space at the moment is browser-land. Consider &lt;strong&gt;level.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;levelup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveljs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;level-js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;levelup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leveljs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;LevelUP string&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name=&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yep, that&#39;s browser code. Simply &lt;code&gt;npm install levelup level-js&lt;/code&gt; and run the module through &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; and you get the full LevelUP API in your browser!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Stay tuned! This is just one step in the quest for a truly modular database system that lets you build a database that suits your applications and not the other way around.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Node.ninjas Presentation - LevelDB and Node Sitting in a Tree</title>
      <link href="https://r.va.gg/2013/05/node.ninjas-presentation-leveldb-and-node-sitting-in-a-tree.html" />
      <updated>2013-05-09T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/05/node.ninjas-presentation-leveldb-and-node-sitting-in-a-tree.html</id>
      <content type="html">
        &lt;p&gt;I&#39;m giving a presentation at &lt;a href=&quot;http://www.meetup.com/sydney-node-ninjas/&quot;&gt;Node.ninjas&lt;/a&gt; tonight in Sydney. I&#39;ve put together a talk about LevelDB and Node that covers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What LevelDB &lt;em&gt;is&lt;/em&gt; and the basics of how it works&lt;/li&gt;
&lt;li&gt;A quick introduction to the core LevelDB libraries in Node: &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt; and &lt;a href=&quot;https://github.com/rvagg/node-leveldown/&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some preaching about the awesomeness of modularity around a small, extensible core; including a whirlwind tour of the current, flourishing, LevelDB+Node ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s this last point that excites me the most. There&#39;s some very smart people building some very clever pieces to the &lt;em&gt;Node Database&lt;/em&gt; puzzle. What&#39;s more, people are actually building functional databases in Node now, I&#39;ve just collected a list from npm of what looks like functional databases that use LevelDB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rumours&lt;/li&gt;
&lt;li&gt;LevelGraph&lt;/li&gt;
&lt;li&gt;PushDB&lt;/li&gt;
&lt;li&gt;NeutrinoDB&lt;/li&gt;
&lt;li&gt;PlumbDB&lt;/li&gt;
&lt;li&gt;Syncstore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a few more that look like a work in progress. Plus, I&#39;m sure there&#39;s more people out there we&#39;ve never even heard of who are cooking up some amazing things using the LevelDB+Node combination!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The slides to my talk are &lt;a href=&quot;https://r.va.gg/presentations/node.ninjas/&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDB and Node: Getting Up and Running</title>
      <link href="https://r.va.gg/2013/05/leveldb-and-node-getting-up-and-running.html" />
      <updated>2013-05-04T00:00:00.000Z</updated>
      <id>https://r.va.gg/2013/05/leveldb-and-node-getting-up-and-running.html</id>
      <content type="html">
        &lt;p&gt;This is the second article in a three-part series on LevelDB and how it can be used in Node.&lt;/p&gt;
&lt;ul class=&quot;parts&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2013/04/19/leveldb-and-node-1/&quot;&gt;Part 1: What is LevelDB Anyway?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2013/05/03/leveldb-and-node-2/&quot;&gt;&lt;strong&gt;Part 2: Getting Up and Running&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our first article covered the basics of LevelDB and its internals. If you haven&#39;t already read it you are encouraged to do so as we will be building upon this knowledge as we introduce the Node interface in this article.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dailyjs.com/images/posts/leveldb.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are two primary libraries for using LevelDB in Node, &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LevelDOWN&lt;/strong&gt; is a pure C++ interface between Node.js and LevelDB. Its API provides limited &lt;em&gt;sugar&lt;/em&gt; and is mostly a straight-forward mapping of LevelDB&#39;s operations into JavaScript. All I/O operations in LevelDOWN are asynchronous and take advantage of LevelDB&#39;s thread-safe nature to parallelise reads and writes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LevelUP&lt;/strong&gt; is the library that the majority of people will use to interface with LevelDB in Node. It wraps LevelDOWN to provide a more Node.js-style interface. Its API provides more &lt;em&gt;sugar&lt;/em&gt; than LevelDOWN, with features such as optional arguments.&lt;/p&gt;
&lt;p&gt;LevelUP exposes iterators as Node.js-style object streams. A LevelUP &lt;strong&gt;ReadStream&lt;/strong&gt; can be used to read sequential entries, forward or reverse, to and from any key.&lt;/p&gt;
&lt;p&gt;LevelUP handles JSON and other encoding types for you. For example, when operating on a LevelUP instance with JSON value-encoding, you simply pass in your objects for writes and they are serialised for you. Likewise, when you read them, they are deserialised and passed back in their original form.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continue reading this article on &lt;a href=&quot;http://dailyjs.com/2013/05/03/leveldb-and-node-2/&quot;&gt;DailyJS.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>LevelDB and Node: What is LevelDB Anyway?</title>
      <link href="https://r.va.gg/2013/05/leveldb-and-node-what-is-leveldb-anyway.html" />
      <updated>2013-05-01T06:30:00.000Z</updated>
      <id>https://r.va.gg/2013/05/leveldb-and-node-what-is-leveldb-anyway.html</id>
      <content type="html">
        &lt;p&gt;This is the first article in a three-part series on LevelDB and how it can be used in Node.&lt;/p&gt;
&lt;p&gt;This article will cover the LevelDB basics and internals to provide a foundation for the next two articles. The second and third articles will cover the core LevelDB Node libraries: &lt;a href=&quot;https://github.com/rvagg/node-levelup&quot;&gt;LevelUP&lt;/a&gt;, &lt;a href=&quot;https://github.com/rvagg/node-leveldown&quot;&gt;LevelDOWN&lt;/a&gt; and the rest of the LevelDB ecosystem that&#39;s appearing in Node-land.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dailyjs.com/images/posts/leveldb.png&quot; alt=&quot;LevelDB&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-leveldb-&quot;&gt;What is LevelDB?&lt;/h3&gt;
&lt;p&gt;LevelDB is an &lt;em&gt;open-source&lt;/em&gt;, &lt;em&gt;dependency-free&lt;/em&gt;, &lt;em&gt;embedded key/value data store&lt;/em&gt;. It was developed in 2011 by Jeff Dean and Sanjay Ghemawat, researchers from Google. It&#39;s written in C++ although it has third-party bindings for most common programming languages. Including JavaScript / Node.js of course.&lt;/p&gt;
&lt;p&gt;LevelDB is based on ideas in Google&#39;s BigTable but does not share code with BigTable, this allows it to be licensed for open source release. Dean and Ghemawat developed LevelDB as a replacement for SQLite as the backing-store for Chrome&#39;s IndexedDB implementation.&lt;/p&gt;
&lt;p&gt;It has since seen very wide adoption across the industry and serves as the back-end to a number of new databases and is now the recommended storage back-end for Riak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continue reading this article on &lt;a href=&quot;http://dailyjs.com/2013/04/19/leveldb-and-node-1/&quot;&gt;DailyJS.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Node.js Dublin Presentation - LevelDB</title>
      <link href="https://r.va.gg/2013/05/node.js-dublin-presentation-leveldb.html" />
      <updated>2013-05-01T06:00:00.000Z</updated>
      <id>https://r.va.gg/2013/05/node.js-dublin-presentation-leveldb.html</id>
      <content type="html">
        &lt;p&gt;I visited lovely Dublin last month to attend &lt;a href=&quot;http://peerconf.com/&quot;&gt;PeerConf&lt;/a&gt;. While there I got to meet a great bunch of Irish programmers at &lt;a href=&quot;http://www.nodejsdublin.com/&quot;&gt;Node.js Dublin&lt;/a&gt;, a semi-regular Node.js meet-up that happens in the &lt;a href=&quot;https://www.engineyard.com/&quot;&gt;Engine Yard&lt;/a&gt; office in Dublin.&lt;/p&gt;
&lt;p&gt;I was invited to give a presentation on LevelDB and the work that I&#39;ve been doing on it in Node.js. I was followed by &lt;a href=&quot;https://github.com/dominictarr&quot;&gt;Dominic Tarr&lt;/a&gt; who&#39;s doing some amazing work on top of LevelDB.&lt;/p&gt;
&lt;p&gt;You can view my slides &lt;a href=&quot;https://r.va.gg/presentations/nodejsdub/&quot;&gt;here&lt;/a&gt; but a written version is currently being spread over 3 parts on &lt;a href=&quot;http://dailyjs.com&quot;&gt;DailyJS&lt;/a&gt;. More about that soon!&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Announcing Bean v1.0.0</title>
      <link href="https://r.va.gg/2012/09/bean-v1.html" />
      <updated>2012-09-08T12:41:12.000Z</updated>
      <id>https://r.va.gg/2012/09/bean-v1.html</id>
      <content type="html">
        &lt;p&gt;In my &lt;a href=&quot;http://rod.vagg.org/2012/08/bean_v1/&quot; title=&quot;Towards Bean v1.0 (or: How event managers do their thing)&quot;&gt;previous post&lt;/a&gt; about Bean I discussed in detail the work that has gone in to a v1 release and how it will differ from the v0.4 branch.&lt;/p&gt;
&lt;p&gt;Bean version 1.0.0 has now been released, you can download it from the &lt;a href=&quot;https://github.com/fat/bean&quot;&gt;GitHub repository&lt;/a&gt; or you can fetch it from &lt;a href=&quot;https://npmjs.org/package/bean&quot;&gt;npm&lt;/a&gt; for your Ender builds.&lt;/p&gt;
&lt;p&gt;Here&#39;s a quick summary of the changes, but for a more in-depth look you should refer to my &lt;a href=&quot;http://rod.vagg.org/2012/08/bean_v1/&quot; title=&quot;Towards Bean v1.0 (or: How event managers do their thing)&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;on()&lt;/code&gt; argument ordering&lt;/b&gt;: the new signature is now &lt;code&gt;.on(events[, selector], handlerFn)&lt;/code&gt;, which will work on both Bean as a standalone library and when bundled in Ender. In Ender, the following aliases also pass through &lt;code&gt;on()&lt;/code&gt; so the same arguments work: &lt;code&gt;addListener()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;listen()&lt;/code&gt; and &lt;code&gt;one()&lt;/code&gt; (which of course will only trigger once). Plus all the specific shortcuts such as &lt;code&gt;click()&lt;/code&gt;, &lt;code&gt;keyup()&lt;/code&gt; etc. although these methods have the first argument hardwired.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt; is left intact with the same argument ordering for standalone Bean and &lt;code&gt;delegate()&lt;/code&gt; has the same signature, the same as jQuery&#39;s equivalent.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;off()&lt;/code&gt; is the new &lt;code&gt;remove()&lt;/code&gt;&lt;/b&gt;: although &lt;code&gt;remove()&lt;/code&gt; is still available in standalone Bean.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Bean attaches a single handler to the DOM for each event type on each element&lt;/b&gt;: as outlined above, Bean will iterate over all handlers for each triggered and (mostly) reuse the same Event object for each call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;:&lt;/b&gt; is available across all supported browsers, it will stop the processing of all handlers for the current event at the current element (i.e. the event will still bubble).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The selector engine argument to &lt;code&gt;add()&lt;/code&gt; is now completely removed&lt;/b&gt;: you used to have to pass a selector engine in as the last argument for delegated events. Now you must set it once at start-up with &lt;code&gt;setSelectorEngine()&lt;/code&gt;. This is automatically taken care of for you in an Ender build.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;A duplicate-handler check is no longer performed when you &lt;i&gt;add&lt;/i&gt;&lt;/b&gt;: performance testing showed that this was a massive slow-down and is simply not something that Bean should be responsible for. If you want to add the same handler twice then that&#39;s your business and responsibility.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Namespace matching for event &lt;code&gt;fire()&lt;/code&gt;ing now matches namespaces using an &lt;i&gt;and&lt;/i&gt; instead of an &lt;code&gt;or&lt;/code&gt;:&lt;/b&gt; so for example, firing namespaces &#39;a.b&#39; will fire any event with &lt;i&gt;both&lt;/i&gt; &#39;a&#39; and &#39;b&#39; rather than &lt;i&gt;either&lt;/i&gt; &#39;a&#39; or &#39;b&#39;. This is compatible with jQuery and is arguably a much more sensible and helpful way to deal with namespaces. You can find some discussion on this &lt;a href=&quot;https://github.com/fat/bean/pull/68&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Lots of internal improvements for speed, code size, etc.&lt;/b&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There was one remaining question to be resolved&amp;mdash;whether &lt;code&gt;Event.stop()&lt;/code&gt; would also trigger &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;. I&#39;ve decided to &lt;b&gt;not&lt;/b&gt; include it and leave it to the user to decide whether they want to prevent triggering of other listeners on the same event/element.&lt;/p&gt;
&lt;p&gt;And that&#39;s it! Please give it a spin and open an issue on GitHub if you have any bugs to report or questions to be answered.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>How Ender bundles libraries for the browser</title>
      <link href="https://r.va.gg/2012/08/ender-bundling.html" />
      <updated>2012-08-24T03:21:38.000Z</updated>
      <id>https://r.va.gg/2012/08/ender-bundling.html</id>
      <content type="html">
        &lt;p&gt;I was asked an interesting Ender question on IRC (#enderjs on Freenode) and as I was answering it, it occurred to me that the subject would be an ideal way to explain how Ender&#39;s multi-library bundling works. So here is that explanation!&lt;/p&gt;&lt;p&gt;The original question went something like this:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When a browser first visits my page, they only get served Bonzo (a DOM manipulation library) as a stand-alone library, but on returning visits they are also served Qwery (a selector engine), Bean (an event manager) and a few other modules in an Ender build. Can I integrate Bonzo into the Ender build on the browser for repeat visitors?&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;Wait, what&#39;s Ender?&lt;/h3&gt;&lt;p&gt;Let&#39;s step back a bit and start with some basics. The way I generally explain Ender to people is that it&#39;s two different things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It&#39;s a build tool, for bundling JavaScript libraries together into a single file. The resulting file constitutes a new &quot;framework&quot; based around the jQuery-style DOM element collection pattern: &lt;code&gt;$(&#39;selector&#39;).method()&lt;/code&gt;. The constituent libraries provide the functionality for the &lt;em&gt;methods&lt;/em&gt; and may also provide the selector engine functionality.&lt;/li&gt;&lt;li&gt;It&#39;s an &lt;em&gt;ecosystem&lt;/em&gt; of JavaScript libraries. Ender promotes a small collection of libraries as a base, called &lt;strong&gt;The Jeesh&lt;/strong&gt;, which together provide a large portion of the functionality normally required of a JavaScript framework, but there are many more libraries compatible with Ender that add extra functionality. Many of the libraries available for Ender are also usable outside of Ender as stand-alone libraries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Continue reading this article on &lt;a href=&quot;http://dailyjs.com/2012/08/23/ender-tutorial/&quot;&gt;DailyJS.com&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;


      </content>
    </entry>
  
    <entry>
      <title>Towards Bean v1.0 (or: How event managers do their thing)</title>
      <link href="https://r.va.gg/2012/08/bean_v1.html" />
      <updated>2012-08-10T13:20:56.000Z</updated>
      <id>https://r.va.gg/2012/08/bean_v1.html</id>
      <content type="html">
        &lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/fat/bean&quot;&gt;Bean&lt;/a&gt;&lt;/b&gt; is the event manager included in &lt;b&gt;&lt;a href=&quot;http://ender.no.de/&quot;&gt;Ender&#39;s&lt;/a&gt;&lt;/b&gt; starter pack, &lt;i&gt;The Jeesh&lt;/i&gt;. If you want to do jQuery-style &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;on()&lt;/code&gt; etc. with Ender, then use Bean.&lt;/p&gt;
&lt;p&gt;At the time of writing, we&#39;re on version &lt;i&gt;0.4.11&lt;/i&gt;. There&#39;s also been a &lt;i&gt;0.5-wip&lt;/i&gt; (&quot;work in progress&quot;) branch for a while now that&#39;s included some improvements I&#39;ve been holding off for a major release. I also put together a &lt;a href=&quot;https://github.com/fat/bean/issues/milestones&quot;&gt;0.5 milestone&lt;/a&gt; on GitHub with some ideas. The major item impacting on the external API is a switch to the &lt;code&gt;on()&lt;/code&gt; argument order found in &lt;a href=&quot;http://api.prototypejs.org/dom/Event/on/&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;https://github.com/madrobby/zepto/blob/753e80114f0618bd7ce865508e0ff2085d0bfb5f/src/event.js#L166&quot;&gt;Zepto&lt;/a&gt;. Considering the significance of the changes in the new branch, I think that perhaps a &lt;b&gt;1.0&lt;/b&gt; release would be warranted.&lt;/p&gt;
&lt;h3&gt;Delegated &lt;code&gt;on()&lt;/code&gt; argument ordering&lt;/h3&gt;

&lt;p&gt;Until now, Bean&#39;s &lt;code&gt;add()&lt;/code&gt; has followed the same argument ordering as jQuery&#39;s &lt;code&gt;&lt;a href=&quot;http://api.jquery.com/bind/&quot;&gt;bind()&lt;/a&gt;&lt;/code&gt; for standard events, and &lt;code&gt;&lt;a href=&quot;http://api.jquery.com/delegate/&quot;&gt;delegate()&lt;/a&gt;&lt;/code&gt; for delegated events; so the signature looks something like this: &lt;code&gt;.add([selector, ]events, handlerFn)&lt;/code&gt; (.on() exists in the Ender bridge and does the same thing). The proposal was to change this to match the other major libraries&#39;, arguably more sensible, &lt;code&gt;.on(events[, selector], handlerFn)&lt;/code&gt;. This is now in the &lt;i&gt;0.5-wip&lt;/i&gt; branch.&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;

&lt;p&gt;Speed was another issue that I wanted to address for a new major release. Benchmarks have shown that Bean is under-performing in some areas and I believed it could do better. The process of analysing and addressing Bean&#39;s performance has been quite instructional and I&#39;ve narrowed it down to some key trade-offs that authors of event libraries have deal with. One of the reasons I wanted to write this post was to outline some of these and solicit some feedback from the wider Bean-using community.&lt;/p&gt;
&lt;h4&gt;Performance trade-off #1: record keeping&lt;/h4&gt;

&lt;p&gt;When you call &lt;code&gt;Element.attachEvent()&lt;/code&gt; (IE8 and below) or &lt;code&gt;Element.addEventListener()&lt;/code&gt; (new browsers) you pass in a handler function that&#39;s called when the event in question is triggered. To stop that function being triggered you have to call &lt;code&gt;Element.detachEvent()&lt;/code&gt; or &lt;code&gt;Element.removeEventListener()&lt;/code&gt; and pass in that same function so the browser knows which handler you want to remove. Event managers like Bean and jQuery make that easier so you can do things like &lt;code&gt;bean.remove(element, &#39;click&#39;)&lt;/code&gt; to remove all handlers; but Bean needs to know which handlers it needs to remove so it must keep records. The biggest change back in v0.4 of Bean was a switch to an internal registry that didn&#39;t molest DOM elements, external objects or external functions to attach identifiers so they could be later recalled. Previously, a &lt;code&gt;&lt;strong&gt;uid&lt;/code&gt; property was set on each DOM element that you set a handler on and your handler function itself had a &lt;code&gt;&lt;/strong&gt;uid&lt;/code&gt; property set on it. jQuery does this too, it has a global &lt;code&gt;jQuery.guid&lt;/code&gt; integer that it increments and attaches to pretty much everything. Don&#39;t be surprised when you find a &lt;code&gt;guid&lt;/code&gt; property on your object/function/element once jQuery has got its fingers on it. This type of record keeping is fast and easy, but molesting other people&#39;s objects isn&#39;t very cool and there are alternatives.&lt;/p&gt;
&lt;p&gt;My first major contribution to Bean was to switch it over to a registry similar to the one Deigo Perini has implemented in &lt;a href=&quot;https://github.com/dperini/nwevents/&quot;&gt;NWEvents&lt;/a&gt;. Bean now iterates and compares rather than looking up directly. It adds some overhead but I managed to squeeze in enough performance gains in other areas to make v0.4 generally faster than v0.3 even with the registry switch.&lt;/p&gt;
&lt;h4&gt;Performance trade-off #2: synthesising the Event object&lt;/h4&gt;

&lt;p&gt;The DOM Level 3 Events specification outlines a base &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event&quot;&gt;Event object interface&lt;/a&gt;, along with specific event types that extend this and add extra attributes and methods. This is the object that you get when your event handler is triggered by the DOM, it&#39;s the object that you read &lt;code&gt;keyCode&lt;/code&gt; from for keyboard events and the object that you call &lt;code&gt;preventDefault()&lt;/code&gt; and &lt;code&gt;stopPropagation()&lt;/code&gt; on.&lt;/p&gt;
&lt;p&gt;The problem we have is that nobody actually implements the full spec as-is and we also have to deal with older browsers which have all sorts of interesting attributes and methods on their Event objects. The stand-out difference is that in IE8 and below, instead of calling &lt;code&gt;Event.preventDefault()&lt;/code&gt; to prevent the default browser behaviour (e.g. following a link click or accepting a keypress), you have to &lt;code&gt;Event.returnValue = false&lt;/code&gt;. And, instead of calling &lt;code&gt;Event.stopPropagation()&lt;/code&gt; to stop the event from bubbling up the DOM to parent elements, you have &lt;code&gt;Event.cancelBubble = true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, the standard practice is for event managers to either create an Event object for you and set up the properties and methods based on the underlying &lt;i&gt;actual&lt;/i&gt; Event object (as in Bean, jQuery and most others), or &lt;i&gt;fix&lt;/i&gt; the Event object (as in Prototype). The performance trade-off here is that this is not cheap to do, especially for &lt;i&gt;every&lt;/i&gt; event you need to react to. But there are ways to speed it up.&lt;/p&gt;
&lt;p&gt;In Bean v0.4 we introduced a property &quot;whitelist&quot; which provided significant performance gains. In v0.3 and prior, Bean would try and copy every property and method that it found on the original Event object over to a new object (&lt;code&gt;{}&lt;/code&gt;). It turns out that accessing some of these properties on some browsers comes with a significant performance penalty, and often you just don&#39;t need them because they are specific quirks of individual browsers. Since v0.4, Bean has been only looking at a list of properties that it expects to find on particular types of event objects and ignoring the rest. In the 0.5-wip branch, I started caching event &quot;fixers&quot; for each event type as they were encountered, so it&#39;s a little faster to figure out exactly what needs to be done as events are triggered.&lt;/p&gt;
&lt;p&gt;But, it&#39;s still costly, so that&#39;s where the next performance trade-off comes in.&lt;/p&gt;
&lt;h4&gt;Performance trade-off #3: hijacking event handler management&lt;/h4&gt;

&lt;p&gt;Given that synthesising the Event object is so costly and you end up doing it multiple times for a single event if you have more than one handler for that event, event managers have a trick up their sleeve to alleviate the pain. NWMatcher, jQuery and others don&#39;t directly attach your event handler to the DOM, instead, they attach a single internal handler that is responsible for triggering any number of handlers you register for a given event on a particular element.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#el&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code would work in Bean and jQuery, the difference is that Bean v0.4 and prior adds 100 handlers directly to the DOM element to listen to that event while jQuery adds just one and iterates over the others when the event is triggered. The new version of Bean does the same.&lt;/p&gt;
&lt;p&gt;The reason this helps with performance is that we don&#39;t have to make a new Event object each time the event is triggered, we can reuse the same one across handlers.&lt;/p&gt;
&lt;p&gt;There&#39;s another major advantage to this approach, and perhaps a more important reason to implement an event manager this way: you get to hide some odd browser quirks. As &lt;a href=&quot;https://twitter.com/kitcambridge&quot;&gt;Kit Cambridge&lt;/a&gt; &lt;a href=&quot;https://twitter.com/kitcambridge/status/230775465542049792&quot;&gt;noted recently&lt;/a&gt;, older versions of Internet Explorer generally fire their handlers in LIFO order, yet W3C specs for &lt;code&gt;addEventListener()&lt;/code&gt; specifies FIFO order! In fact, it&#39;s even worse because the &lt;a href=&quot;https://twitter.com/kitcambridge/status/230775716239794176&quot;&gt;Microsoft documentation&lt;/a&gt; says that they may actually be triggered in &lt;i&gt;random order&lt;/i&gt;! But, if you only have a single real handler then you get complete control over order.&lt;/p&gt;
&lt;p&gt;The benefits go further though, we get to implement some nice features that are completely missing from older browsers and even some current browsers. The most notable is &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;. This is a method that was introduced with DOM Level 3, so it&#39;s missing from IE8 and below, but surprisingly it&#39;s also missing from the current version of Opera! Perhaps the pressure is off because jQuery implements it as part of their relatively complete DOM Level 3 Events implementation using this single-DOM-handler method.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;stopImmediatePropagation()&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Bean has included a custom &lt;code&gt;Event.stop()&lt;/code&gt; method since v0.4, it&#39;s modelled off the &lt;a href=&quot;http://api.prototypejs.org/dom/Event/stop/&quot;&gt;same method&lt;/a&gt; in Prototype. It&#39;s also found in MooTools and and some other libraries. This method combines both &lt;code&gt;Event.stopPropagation()&lt;/code&gt; and &lt;code&gt;Event.preventDefault()&lt;/code&gt; in a short and sweet little utility method. But, &lt;i&gt;&quot;stop&quot;&lt;/i&gt; is slightly misleading, because you can stop the default behaviour of the browser and you can stop the event bubbling up the DOM, but you &lt;b&gt;can&#39;t stop other event handlers for this event &lt;i&gt;at this element&lt;/i&gt; from firing&lt;/b&gt;. That&#39;s where the new &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt; comes in: it halts the processing of the event handler list for the current event at the current element (i.e. it can be used at any point in the bubbling process and it&#39;ll stop processing just the handlers at the element it was called at).&lt;/p&gt;
&lt;p&gt;If an event manager takes the single-DOM-handler approach, it has to care about &lt;code&gt;stopImmediatePropagation()&lt;/code&gt; because it no longer has an affect in the browser since the browser only has a single handler to worry about. But, you also get the benefit that it now applies to any browser the event manager supports.&lt;/p&gt;
&lt;p&gt;At the time of writing this article I haven&#39;t decided whether I think that &lt;code&gt;Event.stop()&lt;/code&gt; should also bundle &lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;. I&#39;m leaning towards including it because &lt;i&gt;&quot;stop&quot;&lt;/i&gt; should mean &lt;b&gt;stop&lt;/b&gt; and the combination of all three methods would certainly do this.&lt;/p&gt;
&lt;h3&gt;List of changes for Bean 1.0&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;&lt;code&gt;on()&lt;/code&gt; argument ordering&lt;/b&gt;: the new signature is now &lt;code&gt;.on(events[, selector], handlerFn)&lt;/code&gt;, which will work on both Bean as a standalone library and when bundled in Ender. In Ender, the following aliases also pass through &lt;code&gt;on()&lt;/code&gt; so the same arguments work: &lt;code&gt;addListener()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;listen()&lt;/code&gt; and &lt;code&gt;one()&lt;/code&gt; (which of course will only trigger once). Plus all the specific shortcuts such as &lt;code&gt;click()&lt;/code&gt;, &lt;code&gt;keyup()&lt;/code&gt; etc. although these methods have the first argument hardwired.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt; is left intact with the same argument ordering for standalone Bean and &lt;code&gt;delegate()&lt;/code&gt; has the same signature, the same as jQuery&#39;s equivalent.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;off()&lt;/code&gt; is the new &lt;code&gt;remove()&lt;/code&gt;&lt;/b&gt;: although &lt;code&gt;remove()&lt;/code&gt; is still available in standalone Bean.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Bean attaches a single handler to the DOM for each event type on each element&lt;/b&gt;: as outlined above, Bean will iterate over all handlers for each triggered and (mostly) reuse the same Event object for each call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;Event.stopImmediatePropagation()&lt;/code&gt;:&lt;/b&gt; is available across all supported browsers, it will stop the processing of all handlers for the current event at the current element (i.e. the event will still bubble).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The selector engine argument to &lt;code&gt;add()&lt;/code&gt; is now completely removed&lt;/b&gt;: you used to have to pass a selector engine in as the last argument for delegated events. Now you must set it once at start-up with &lt;code&gt;setSelectorEngine()&lt;/code&gt;. This is automatically taken care of for you in an Ender build.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;A duplicate-handler check is no longer performed when you &lt;i&gt;add&lt;/i&gt;&lt;/b&gt;: performance testing showed that this was a massive slow-down and is simply not something that Bean should be responsible for. If you want to add the same handler twice then that&#39;s your business and responsibility.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Namespace matching for event &lt;code&gt;fire()&lt;/code&gt;ing now matches namespaces using an &lt;i&gt;and&lt;/i&gt; instead of an &lt;code&gt;or&lt;/code&gt;:&lt;/b&gt; so for example, firing namespaces &#39;a.b&#39; will fire any event with &lt;i&gt;both&lt;/i&gt; &#39;a&#39; and &#39;b&#39; rather than &lt;i&gt;either&lt;/i&gt; &#39;a&#39; or &#39;b&#39;. This is compatible with jQuery and is arguably a much more sensible and helpful way to deal with namespaces. You can find some discussion on this &lt;a href=&quot;https://github.com/fat/bean/pull/68&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Lots of internal improvements for speed, code size, etc.&lt;/b&gt;.&lt;/p&gt;
&lt;h3&gt;Deconstructing performance (benchmarks)&lt;/h3&gt;

&lt;p&gt;We&#39;ve had a benchmark suite since v0.4 to help measure the impact of changes, so I&#39;ve extended it to help compare some versions of Bean. The benchmarks use &lt;a href=&quot;http://benchmarkjs.com/&quot;&gt;benchmark.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are 3 versions of Bean included here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Bean 0.4&lt;/b&gt;: The current release of Bean, specifically version 0.4.11-1, source &lt;a href=&quot;https://github.com/fat/bean/tree/3ded4e905ef89a344729953be69e438583968679&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Bean 0.5a&lt;/b&gt;: An unreleased version of Bean in the 0.5-wip branch. Specifically most of the changes listed above are included here &lt;i&gt;except&lt;/i&gt; for the single-DOM-handler change. This is here to assess the impact of this change and deciding whether it&#39;s a worthwhile &quot;improvement&quot;. Source &lt;a href=&quot;https://github.com/fat/bean/tree/989f33520c1ef6cb07e138a4176b14f3184adef6&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Bean 1.0a&lt;/b&gt;: The main difference between this and 0.5a is the single-DOM-handler change. Source &lt;a href=&quot;https://github.com/fat/bean/tree/4bcf05ffe12cfcf0bf8744d2ebc1627c554eed92&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&#39;ll have some notes about my own analysis of these numbers below but first I should mention that these benchmarks are not particularly helpful in showing how the libraries perform with real use patterns. I consider them to mainly be proxies for identifying the performance of particular behaviours within the libraries. You&#39;ll note that there are a lot of tests for &lt;code&gt;add()&lt;/code&gt; / &lt;code&gt;on()&lt;/code&gt;, that&#39;s simply because that&#39;s the easiest to test reliably and also because I haven&#39;t been bothered coming up useful with tests for other things. It&#39;s very difficult to test the actual event triggering which would be the most interesting bit, although the &lt;code&gt;fire()&lt;/code&gt; tests give us a little bit of insight. The tests at the bottom try to capture a full add/fire/remove cycle, but even this isn&#39;t even particularly helpful. These benchmarks can be found in the Bean repo so if you want to tinker then feel free, I&#39;d love to have additional input.&lt;/p&gt;
&lt;p&gt;So, more so than most benchmarks, take these with a very large grain of salt or two!&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(The numbers are ops/sec, so higher is better in all cases)&lt;/i&gt;&lt;/p&gt;
&lt;style&gt;
table.results { font-family: &quot;Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Verdana, sans-serif; margin-bottom: 1.4em; }
table.results th:first-child, table.results td { text-align: right; }
table.results tbody tr:nth-child(2n+1) { background-color: rgba(0,0,0,0.075); }
table.results tr &gt; * { padding: 0 3px; }
&lt;/style&gt;

&lt;h4&gt;Chrome&lt;/h4&gt;

&lt;table class=&quot;results&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bean 0.4&lt;/th&gt;
    &lt;th&gt;Bean 0.5a&lt;/th&gt;
    &lt;th&gt;Bean 1.0a&lt;/th&gt;
    &lt;th&gt;NWEvents&lt;/th&gt;
    &lt;th&gt;jQuery&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event, fn)&lt;/th&gt;&lt;td&gt;25,760&lt;/td&gt;&lt;td&gt;66,580&lt;/td&gt;&lt;td&gt;185,147&lt;/td&gt;&lt;td&gt;18,133&lt;/td&gt;&lt;td&gt;142,161&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, event, fn)&lt;/th&gt;&lt;td&gt;33,024&lt;/td&gt;&lt;td&gt;99,208&lt;/td&gt;&lt;td&gt;36,481&lt;/td&gt;&lt;td&gt;18,634&lt;/td&gt;&lt;td&gt;50,554&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(element, custom, fn)&lt;/th&gt;&lt;td&gt;28,728&lt;/td&gt;&lt;td&gt;56,607&lt;/td&gt;&lt;td&gt;165,189&lt;/td&gt;&lt;td&gt;11,248&lt;/td&gt;&lt;td&gt;119,593&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, custom, fn)&lt;/th&gt;&lt;td&gt;36,150&lt;/td&gt;&lt;td&gt;78,260&lt;/td&gt;&lt;td&gt;34,308&lt;/td&gt;&lt;td&gt;24,409&lt;/td&gt;&lt;td&gt;44,761&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;30,082&lt;/td&gt;&lt;td&gt;64,435&lt;/td&gt;&lt;td&gt;189,468&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;136,486&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;33,702&lt;/td&gt;&lt;td&gt;101,915&lt;/td&gt;&lt;td&gt;34,678&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;33,637&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(element, selector, event, fn)&lt;/th&gt;&lt;td&gt;25,180&lt;/td&gt;&lt;td&gt;42,274&lt;/td&gt;&lt;td&gt;119,339&lt;/td&gt;&lt;td&gt;2,909&lt;/td&gt;&lt;td&gt;76,171&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add(unique element, selector, event, fn)&lt;/th&gt;&lt;td&gt;27,328&lt;/td&gt;&lt;td&gt;91,156&lt;/td&gt;&lt;td&gt;30,308&lt;/td&gt;&lt;td&gt;1,069&lt;/td&gt;&lt;td&gt;35,696&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;add({})&lt;/th&gt;&lt;td&gt;15,594&lt;/td&gt;&lt;td&gt;27,312&lt;/td&gt;&lt;td&gt;59,434&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;fire(event)&lt;/th&gt;&lt;td&gt;576&lt;/td&gt;&lt;td&gt;492&lt;/td&gt;&lt;td&gt;6,860&lt;/td&gt;&lt;td&gt;9,797&lt;/td&gt;&lt;td&gt;21,821&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;fire(custom)&lt;/th&gt;&lt;td&gt;165,222&lt;/td&gt;&lt;td&gt;164,418&lt;/td&gt;&lt;td&gt;161,243&lt;/td&gt;&lt;td&gt;240,961&lt;/td&gt;&lt;td&gt;86,291&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;fire(namespace)&lt;/th&gt;&lt;td&gt;29,742&lt;/td&gt;&lt;td&gt;28,721&lt;/td&gt;&lt;td&gt;27,666&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;element add / click / remove&lt;/th&gt;&lt;td&gt;18,579&lt;/td&gt;&lt;td&gt;17,425&lt;/td&gt;&lt;td&gt;14,760&lt;/td&gt;&lt;td&gt;1,748&lt;/td&gt;&lt;td&gt;2,775&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;element add / fire / remove&lt;/th&gt;&lt;td&gt;31,230&lt;/td&gt;&lt;td&gt;28,344&lt;/td&gt;&lt;td&gt;15,802&lt;/td&gt;&lt;td&gt;1,127&lt;/td&gt;&lt;td&gt;2,763&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;object add / fire / remove&lt;/th&gt;&lt;td&gt;58,927&lt;/td&gt;&lt;td&gt;53,139&lt;/td&gt;&lt;td&gt;49,549&lt;/td&gt;&lt;td&gt;107,700&lt;/td&gt;&lt;td&gt;18,619&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4&gt;Firefox&lt;/h4&gt;

&lt;table class=&quot;results&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bean 0.4&lt;/th&gt;
    &lt;th&gt;Bean 0.5a&lt;/th&gt;
    &lt;th&gt;Bean 1.0a&lt;/th&gt;
    &lt;th&gt;NWEvents&lt;/th&gt;
    &lt;th&gt;jQuery&lt;/th&gt;
  &lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event, fn)&lt;/th&gt;&lt;td&gt;20,404&lt;/td&gt;&lt;td&gt;45,030&lt;/td&gt;&lt;td&gt;100,546&lt;/td&gt;&lt;td&gt;13,826&lt;/td&gt;&lt;td&gt;63,159&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event, fn)&lt;/th&gt;&lt;td&gt;16,708&lt;/td&gt;&lt;td&gt;67,417&lt;/td&gt;&lt;td&gt;19,625&lt;/td&gt;&lt;td&gt;16,810&lt;/td&gt;&lt;td&gt;29,130&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, custom, fn)&lt;/th&gt;&lt;td&gt;16,691&lt;/td&gt;&lt;td&gt;42,601&lt;/td&gt;&lt;td&gt;134,535&lt;/td&gt;&lt;td&gt;13,368&lt;/td&gt;&lt;td&gt;59,774&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, custom, fn)&lt;/th&gt;&lt;td&gt;24,159&lt;/td&gt;&lt;td&gt;55,312&lt;/td&gt;&lt;td&gt;21,235&lt;/td&gt;&lt;td&gt;13,475&lt;/td&gt;&lt;td&gt;27,877&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;17,414&lt;/td&gt;&lt;td&gt;53,639&lt;/td&gt;&lt;td&gt;101,427&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;55,321&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;23,735&lt;/td&gt;&lt;td&gt;59,751&lt;/td&gt;&lt;td&gt;22,034&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;27,576&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, selector, event, fn)&lt;/th&gt;&lt;td&gt;18,766&lt;/td&gt;&lt;td&gt;54,571&lt;/td&gt;&lt;td&gt;92,602&lt;/td&gt;&lt;td&gt;2,317&lt;/td&gt;&lt;td&gt;36,753&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, selector, event, fn)&lt;/th&gt;&lt;td&gt;22,094&lt;/td&gt;&lt;td&gt;56,026&lt;/td&gt;&lt;td&gt;16,705&lt;/td&gt;&lt;td&gt;964&lt;/td&gt;&lt;td&gt;22,102&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add({})&lt;/th&gt;&lt;td&gt;9,126&lt;/td&gt;&lt;td&gt;17,104&lt;/td&gt;&lt;td&gt;32,093&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(event)&lt;/th&gt;&lt;td&gt;260&lt;/td&gt;&lt;td&gt;266&lt;/td&gt;&lt;td&gt;3,391&lt;/td&gt;&lt;td&gt;3,120&lt;/td&gt;&lt;td&gt;11,154&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(custom)&lt;/th&gt;&lt;td&gt;61,845&lt;/td&gt;&lt;td&gt;59,950&lt;/td&gt;&lt;td&gt;61,742&lt;/td&gt;&lt;td&gt;93,033&lt;/td&gt;&lt;td&gt;45,978&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(namespace)&lt;/th&gt;&lt;td&gt;28,910&lt;/td&gt;&lt;td&gt;27,379&lt;/td&gt;&lt;td&gt;23,127&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / click / remove&lt;/th&gt;&lt;td&gt;7,644&lt;/td&gt;&lt;td&gt;6,220&lt;/td&gt;&lt;td&gt;6,005&lt;/td&gt;&lt;td&gt;1,284&lt;/td&gt;&lt;td&gt;4,845&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / fire / remove&lt;/th&gt;&lt;td&gt;11,288&lt;/td&gt;&lt;td&gt;10,954&lt;/td&gt;&lt;td&gt;7,458&lt;/td&gt;&lt;td&gt;788&lt;/td&gt;&lt;td&gt;9,115&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;object add / fire / remove&lt;/th&gt;&lt;td&gt;45,165&lt;/td&gt;&lt;td&gt;37,934&lt;/td&gt;&lt;td&gt;37,306&lt;/td&gt;&lt;td&gt;38,097&lt;/td&gt;&lt;td&gt;12,490&lt;/td&gt;
  &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4&gt;IE9&lt;/h4&gt;

&lt;table class=&quot;results&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bean 0.4&lt;/th&gt;
    &lt;th&gt;Bean 0.5a&lt;/th&gt;
    &lt;th&gt;Bean 1.0a&lt;/th&gt;
    &lt;th&gt;NWEvents&lt;/th&gt;
    &lt;th&gt;jQuery&lt;/th&gt;
  &lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;add(element, event, fn)&lt;/th&gt;&lt;td&gt;925&lt;/td&gt;&lt;td&gt;944&lt;/td&gt;&lt;td&gt;209,714&lt;/td&gt;&lt;td&gt;4,321&lt;/td&gt;&lt;td&gt;117,343&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event, fn)&lt;/th&gt;&lt;td&gt;13,559&lt;/td&gt;&lt;td&gt;113,944&lt;/td&gt;&lt;td&gt;10,568&lt;/td&gt;&lt;td&gt;3,012&lt;/td&gt;&lt;td&gt;58,929&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, custom, fn)&lt;/th&gt;&lt;td&gt;946&lt;/td&gt;&lt;td&gt;1,004&lt;/td&gt;&lt;td&gt;219,631&lt;/td&gt;&lt;td&gt;4,329&lt;/td&gt;&lt;td&gt;128,570&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, custom, fn)&lt;/th&gt;&lt;td&gt;7,557&lt;/td&gt;&lt;td&gt;123,288&lt;/td&gt;&lt;td&gt;12,620&lt;/td&gt;&lt;td&gt;3,191&lt;/td&gt;&lt;td&gt;32,610&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;880&lt;/td&gt;&lt;td&gt;826&lt;/td&gt;&lt;td&gt;87,932&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;53,737&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, event.namespace, fn)&lt;/th&gt;&lt;td&gt;11,823&lt;/td&gt;&lt;td&gt;103,977&lt;/td&gt;&lt;td&gt;12,001&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;28,053&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(element, selector, event, fn)&lt;/th&gt;&lt;td&gt;655&lt;/td&gt;&lt;td&gt;802&lt;/td&gt;&lt;td&gt;57,619&lt;/td&gt;&lt;td&gt;382&lt;/td&gt;&lt;td&gt;21,159&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add(unique element, selector, event, fn)&lt;/th&gt;&lt;td&gt;11,649&lt;/td&gt;&lt;td&gt;96,597&lt;/td&gt;&lt;td&gt;11,404&lt;/td&gt;&lt;td&gt;139&lt;/td&gt;&lt;td&gt;24,756&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;add({})&lt;/th&gt;&lt;td&gt;53&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;td&gt;17,735&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(event)&lt;/th&gt;&lt;td&gt;290,543&lt;/td&gt;&lt;td&gt;286,385&lt;/td&gt;&lt;td&gt;293,547&lt;/td&gt;&lt;td&gt;71,396&lt;/td&gt;&lt;td&gt;22,794&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(custom)&lt;/th&gt;&lt;td&gt;229,241&lt;/td&gt;&lt;td&gt;223,189&lt;/td&gt;&lt;td&gt;216,943&lt;/td&gt;&lt;td&gt;78,395&lt;/td&gt;&lt;td&gt;23,081&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;fire(namespace)&lt;/th&gt;&lt;td&gt;17,507&lt;/td&gt;&lt;td&gt;11,848&lt;/td&gt;&lt;td&gt;16,018&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / click / remove&lt;/th&gt;&lt;td&gt;10,228&lt;/td&gt;&lt;td&gt;9,697&lt;/td&gt;&lt;td&gt;9,260&lt;/td&gt;&lt;td&gt;478&lt;/td&gt;&lt;td&gt;8,345&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;element add / fire / remove&lt;/th&gt;&lt;td&gt;13,062&lt;/td&gt;&lt;td&gt;10,587&lt;/td&gt;&lt;td&gt;18,577&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;td&gt;6,094&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;object add / fire / remove&lt;/th&gt;&lt;td&gt;30,924&lt;/td&gt;&lt;td&gt;29,096&lt;/td&gt;&lt;td&gt;28,904&lt;/td&gt;&lt;td&gt;39,761&lt;/td&gt;&lt;td&gt;7,634&lt;/td&gt;
  &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;First, let me say that the IE results don&#39;t make a whole lot of sense so I&#39;m going to suggest that the Chrome and Firefox benchmarks are the best indicators of general performance characteristics across browsers. The IE results have similar patterns to the others but there&#39;s way too much strangeness in there for me to take them seriously! IE8 has difficulty running all the benchmarks without locking up and I don&#39;t care enough to persevere there so I&#39;m ignoring that too. Safari crashes and Opera has very similar results to Firefox and Chrome.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(Just to clarify, it&#39;s only the benchmarks that have trouble running in older versions of IE, the Bean test suite still runs on IE6 and above and has been beefed up even more in the 0.5-wip branch.)&lt;/i&gt;&lt;/p&gt;
&lt;h4&gt;Some observations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The gains for &lt;code&gt;add()&lt;/code&gt; from Bean v0.4 to v0.5a are largely from removing the &lt;b&gt;duplicate handler check&lt;/b&gt;.&lt;/li&gt;
  &lt;li&gt;The reason for the duplicate tests for &lt;b&gt;&lt;i&gt;&quot;element&quot;&lt;/i&gt; vs &lt;i&gt;&quot;unique element&quot;&lt;/i&gt; in the &lt;code&gt;add()&lt;/code&gt; benchmarks&lt;/b&gt; is to demonstrate the costs and benefits involved the single-DOM-handler model. You can see that the numbers switch between the non-unique / unique tests for Bean v0.5a and v1.0a. Also jQuery suffers significantly when you feed it unique elements because it has to add DOM handlers each time.&lt;/li&gt;
  &lt;li&gt;The poor performance for Bean v0.4 and v0.5a in &lt;b&gt;&lt;code&gt;fire()&lt;/code&gt; benchmarks&lt;/b&gt; is mostly attributed to &lt;b&gt;Event object synthesising&lt;/b&gt;, rather than the speed of the browser-native handler list management. This is important because firing native-style events (e.g. &lt;code&gt;fire(&#39;click&#39;)&lt;/code&gt;, which is what we&#39;re testing here) is not a common activity but we&#39;re having to synthesize the event object each time a handler is triggered. So, this is where Bean finds the most &lt;i&gt;win&lt;/i&gt; in switching to a single-DOM-handler model.&lt;/li&gt;
  &lt;li&gt;Bean loses performance between v0.5a and v1.0a in the unique element &lt;code&gt;add()&lt;/code&gt; benchmarks, this can mostly be explained by the &lt;b&gt;overhead of managing the root handler that it needs to attach to the DOM&lt;/b&gt;. The handler is stored in the internal registry and each time you &lt;code&gt;add()&lt;/code&gt; it needs to work out if you already have a root handler attached to the DOM or not for the given event / element. jQuery gets to take some shortcuts by polluting the DOM and handler functions with &lt;code&gt;guid&lt;/code&gt; properties. However, the numbers suggest to me that there is some additional performance that could be squeezed out of Bean in this area.&lt;/li&gt;
  &lt;li&gt;Bean is fairly liberal with its &lt;b&gt;whitelist of properties&lt;/b&gt; to copy from the original Event object, jQuery is a bit more restrictive with its similar system, this may slow Bean down very slightly.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Delegated events&lt;/b&gt; are not represented well here, but the results would be very interesting because of the additional work required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;File size&lt;/h3&gt;

&lt;p&gt;A lot of users of Bean are file-size-sensitive, so it&#39;s important to highlight that there are costs to these performance improvements. Minified, gzipped, the sizes for each of these versions of Bean are:&lt;/p&gt;
&lt;table class=&quot;results&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;th&gt;Bean 0.4&lt;/th&gt;&lt;td&gt;3870 bytes&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;th&gt;Bean 0.5a&lt;/th&gt;&lt;td&gt;3959 bytes&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;th&gt;Bean 1.0a&lt;/th&gt;&lt;td&gt;4176 bytes&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I&#39;ve tried &lt;i&gt;really&lt;/i&gt; hard to keep the size under 4kb but the additional overhead in managing the single-DOM-handler is too much to achieve that, even though I&#39;ve managed to shave many precious bytes off in other areas of the code in the process (which unfortunately can&#39;t be seen in these numbers!).&lt;/p&gt;
&lt;p&gt;We&#39;re still well under the minified, gzipped size of the jQuery events module by itself, even though we implement very similar functionality and jQuery gets to leverage lots of internal sugar not contained within the events module.&lt;/p&gt;
&lt;h3&gt;Request for feedback&lt;/h3&gt;

&lt;p&gt;After all that, what I really want is feedback! At this point I&#39;m happy to release a proper version 1.0, I think it&#39;s major enough to warrant a jump past 0.5. I&#39;d really like to hear feedback from people that have doubts that the changes are worth it, particularly the single-DOM-handler change.&lt;/p&gt;
&lt;h3&gt;Using the 1.0 pre-release&lt;/h3&gt;

&lt;p&gt;I&#39;ve started using it in production and am very happy with the results so far, I&#39;d love to have feedback from anyone else who wants to give it a spin.&lt;/p&gt;
&lt;p&gt;The new version of Bean is in npm with the tag &lt;i&gt;dev&lt;/i&gt; so you can include it in your Ender builds by referring to &lt;i&gt;bean@dev&lt;/i&gt; as the package name.&lt;/p&gt;
&lt;p&gt;For stand-alone, you can grab it from the &lt;a href=&quot;https://github.com/fat/bean/tree/0.5-wip&quot;&gt;0.5-wip branch&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;Thanks for getting this far!&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>mod_geoip2_xff update</title>
      <link href="https://r.va.gg/2012/07/mod_geoip2_xff-update.html" />
      <updated>2012-07-06T02:47:17.000Z</updated>
      <id>https://r.va.gg/2012/07/mod_geoip2_xff-update.html</id>
      <content type="html">
        &lt;p&gt;Thanks to a contribution from &lt;a href=&quot;https://plus.google.com/105599514712357912650/posts&quot;&gt;Kevin Gaudin&lt;/a&gt;, I have a new release of my &lt;a href=&quot;http://www.maxmind.com/app/mod_geoip&quot;&gt;mod_geoip2&lt;/a&gt; fork. (The history starts &lt;a href=&quot;http://rod.vagg.org/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for/&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;You can find the source here: &lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff&quot;&gt;https://github.com/rvagg/mod_geoip2_xff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kevin&#39;s addition provides a fall-back to the standard remote IP address of the client if no public IP address is found in the &lt;em&gt;X-Forwarded-For&lt;/em&gt; header. Previously, my implementation just fell back to the default mod_geoip2 behaviour of just taking the first IP address in the &lt;em&gt;X-Forwarded-For&lt;/em&gt; header, or the last if you set &lt;em&gt;GeoIPUseLastXForwardedForIP&lt;/em&gt; in your config.&lt;/p&gt;
&lt;p&gt;I also took the opportunity to clean things up a little and introduce a config option to turn on the special &lt;em&gt;X-Forwarded-For&lt;/em&gt; handling. You now have to set &lt;strong&gt;GeoIPUseLeftPublicXForwardedForIP&lt;/strong&gt; to &lt;strong&gt;On&lt;/strong&gt; to activate it.&lt;/p&gt;
&lt;p&gt;Thanks to Kevin, and additional contributions are welcome!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update July 7th 2012&lt;/strong&gt;: Since I was in C-mode, I went ahead and implemented something I&#39;ve tried to get working in the past: &lt;strong&gt;hostname lookups on the X-Forwarded-For host!&lt;/strong&gt; I got intimate with APR and worked out how to use Apache to do the resolution so there isn&#39;t the lengthy timeout of raw syscalls. If you set &lt;strong&gt;GeoIPEnableHostnameLookups&lt;/strong&gt; to &lt;strong&gt;On&lt;/strong&gt;, you&#39;ll get a &lt;strong&gt;GEOIP_HOST&lt;/strong&gt; environment variable to use.&lt;/p&gt;
&lt;p&gt;I&#39;ve also decided to start making tarballs available off GitHub for your convenience: &lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff/downloads&quot;&gt;https://github.com/rvagg/mod_geoip2_xff/downloads&lt;/a&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Data URI + SVG</title>
      <link href="https://r.va.gg/2012/05/data-uri-svg.html" />
      <updated>2012-05-23T05:16:22.000Z</updated>
      <id>https://r.va.gg/2012/05/data-uri-svg.html</id>
      <content type="html">
        &lt;p&gt;Data URIs are great when you want to serve small resources that there&#39;s no point serving up in a combined sprite. Consider &lt;a href=&quot;http://microjs.com&quot;&gt;microjs.com&lt;/a&gt; which serves up an HTML file plus a single JavaScript file containing the latest data used to build the site. The build logic is in an embedded script, the CSS is also embedded, so it&#39;s pretty lean considering what you see and the amount of data displayed. But, notice the 3 icons for each project, 2 GitHub icons and a Twitter icon. They are PNG images, combined as a sprite but to avoid an additional HTTP request to fetch them they are simply embedded in the CSS which is embedded on the page:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.title&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.stat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVBORw0KGgoAAAANSUhE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Easy and quick and fairly well supported across browsers.&lt;/p&gt;
&lt;p&gt;But Data URIs can do so much more, including embed SVG!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;url(&quot;data:image/svg+xml,&lt;span class=&quot;nt&quot;&gt;&lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;0 0 40 40&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;25&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;25&#39;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;http://www.w3.org/2000/svg&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&gt;&lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;rgb(91, 183, 91)&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;M2.379,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;14.729L5.208,11.899L12.958,19.648L25.877,6.733L28.707,9.561L12.958,25.308Z&#39;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;/&gt;&lt;/svg&gt;&lt;/span&gt;&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above will produce a 25px square image but the SVG is drawn in a 40x40 coordinate box, because I&#39;m using a &lt;a href=&quot;http://raphaeljs.com/icons/&quot;&gt;Raphaël Icon&lt;/a&gt; paths (you can try it yourself by replacing the &lt;code&gt;d=&#39;&#39;&lt;/code&gt; content with the path data you get when you click on any of the icons on the &lt;a href=&quot;http://raphaeljs.com/icons/&quot;&gt;Raphaël Icons&lt;/a&gt; page.)&lt;/p&gt;
&lt;p&gt;SVG of course gives you perfectly scalable graphics, embedding in a Data URI in your CSS lets you use them in the same way that you use other CSS images, minus the need to fetch them via an additional HTTP request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&#39;s the catch?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s the web, of course there&#39;s a catch, and of course it involves Internet Explorer!&lt;/p&gt;
&lt;p&gt;For a start you don&#39;t get SVG support in IE8 and below, which is a bit of a problem right now because IE8 is still very much with us due to the fact that IE9 isn&#39;t available for Windows XP users. But there&#39;s more than that. IE adheres to the &lt;a href=&quot;http://www.ietf.org/rfc/rfc2397.txt&quot;&gt;spec&lt;/a&gt; more strongly than other browsers in that there are 2 types of encoding for Data URIs, &lt;em&gt;base64&lt;/em&gt; and &lt;em&gt;non-base64&lt;/em&gt;. If you leave the &lt;code&gt;;base64&lt;/code&gt; off your string then most browsers let you get away with anything that doesn&#39;t conflict with standard CSS, so basically don&#39;t use &lt;code&gt;&quot;&lt;/code&gt;, or if you do, escape them with simple &lt;code&gt;\&quot;&lt;/code&gt;. What the Data URI spec says is:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;...the data (as a sequence of octets) is represented using ASCII encoding for octets inside the range of safe URL characters and using the standard %xx hex encoding of URLs for octets outside that range.&lt;/blockquote&gt;
And IE doesn&#39;t let you have it any other way. So you either encode your SVG into Base64 or escape it with &lt;code&gt;%xx&lt;/code&gt;&#39;s, which kind of loses some of the elegance of SVG in CSS. But at least you&#39;ll get IE9+ support.&lt;/p&gt;
&lt;p&gt;So here&#39;s some examples to &lt;a href=&quot;http://jsfiddle.net/rvagg/exULa/&quot;&gt;fiddle&lt;/a&gt; with. Click through to the CSS tab to see the gory details. The first icon is Base64 encoded, the second icon is URL escaped (&lt;code&gt;%xx&lt;/code&gt;), the rest are just plain SVG, so you&#39;ll get different results viewing in IE9 vs the rest.&lt;/p&gt;
&lt;p&gt;SVG in Data URIs is an elegant solution (and a bit of fun) but only really useful at the moment if you don&#39;t need to support IE8 and below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 17th Sept 2012&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below in the comments, Ben reports on his (much more rigorous) research into browser support; refer to that if you&#39;re serious about using SVG in Data URIs. An interesting result of his work comes from the &lt;a href=&quot;https://code.google.com/p/chromium/issues/detail?id=137277&quot;&gt;issue&lt;/a&gt; he filed with Chromium (I don&#39;t know if this is a generic WebKit thing or not but you could easily test if you&#39;re interested). It turns out that Chromium/WebKit requires Base64 Data URIs to be multiples of 4 characters, so you just need to pad with &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>A mod_geoip2 that properly handles X-Forwarded-For</title>
      <link href="https://r.va.gg/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for.html" />
      <updated>2012-04-22T04:55:42.000Z</updated>
      <id>https://r.va.gg/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for.html</id>
      <content type="html">
        &lt;p&gt;This is just a short follow-up to my original post on&lt;em&gt; &lt;a title=&quot;Wrangling the X-Forwarded-For Header&quot; href=&quot;http://rod.vagg.org/2011/07/wrangling-the-x-forwarded-for-header/&quot;&gt;Wrangling the X-Forwarded-For Header&lt;/a&gt;&lt;/em&gt; where I promised that one of the things I would follow up with was how to get MaxMind&#39;s mod_geoip2 to handle the X-Forwarded-For according to the rule:&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;em&gt;Always use the leftmost non-private address&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
Well, since it&#39;s turning out to be such a popular post I thought I&#39;d better get it done to help anyone else out that&#39;s searching around for solutions. So, I&#39;ve put up the code on my GitHub account here:&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff&quot;&gt;https://github.com/rvagg/mod_geoip2_xff&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
I&#39;m maintaining a &lt;em&gt;maxmind&lt;/em&gt; branch that contains the original code from MaxMind and the &lt;em&gt;master&lt;/em&gt; contains my changes, so you can see a nice &lt;a href=&quot;https://github.com/rvagg/mod_geoip2_xff/compare/maxmind...master&quot;&gt;diff&lt;/a&gt; of what I&#39;ve done.&lt;/p&gt;
&lt;p&gt;I have to warn that I haven&#39;t done any serious C programming for more than 15 years or so, my code probably isn&#39;t fantastic, and I&#39;m open to outside contributions from anyone with suggestions. The approach I&#39;ve taken is to embed the regexes of my previous post into the module and walk through the IP addresses looking for a non-private match.&lt;/p&gt;
&lt;p&gt;Since my initial release, based on MaxMind&#39;s 1.2.5, they&#39;ve put out a 1.2.7 which includes the addition of a &lt;em&gt;GeoIPUseLastXForwardedForIP&lt;/em&gt; flag. I can imagine what prompted this addition but as I said in my previous post this isn&#39;t the way to get the best IP address. As of writing, my current master branch is based on 1.2.7 and has this new flag but because the &lt;em&gt;first_public_ip_in_list&lt;/em&gt; is done first it&#39;s mostly useless.&lt;/p&gt;
&lt;p&gt;If anyone wants to hassle MaxMind on my behalf then feel free, I sent them an email a couple of months ago about this but received no answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Update 6-July-2012&lt;/strong&gt;&lt;/strong&gt;: A new release with some changes, details &lt;a href=&quot;http://rod.vagg.org/2012/07/mod_geoip2_xff-update/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>JavaScript and Semicolons</title>
      <link href="https://r.va.gg/2012/04/javascript-and-semicolons.html" />
      <updated>2012-04-20T06:10:16.000Z</updated>
      <id>https://r.va.gg/2012/04/javascript-and-semicolons.html</id>
      <content type="html">
        &lt;p&gt;In syntax terms, JavaScript is in the broad C-family of languages. The C-family is diverse and includes languages such as C (obviously), C++, Objective-C, Perl, Java, C# and the newer Go from Google and Rust from Mozilla. Common themes in these languages include:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;The use of curly braces to surround blocks.&lt;/li&gt;
    &lt;li&gt;The general insignificance of white space (spaces, tabs, new lines) except in very limited cases. Indentation is optional and is therefore a matter of style and preference, plus programs can be written on as few or as many lines as you want.&lt;/li&gt;
    &lt;li&gt;The use of semicolons to end statements, expressions and other constructs. Semicolons become the delimiter that the new line character is in white-space-significant languages.&lt;/li&gt;
&lt;/ul&gt;
JavaScript’s rules for curly braces, white space and semicolons are consistent with the C-family and its formal specification, known as the ECMAScript Language Specification makes this clear:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;Certain ECMAScript statements (empty statement, variable statement, expression statement, do-while statement, continue statement, break statement, return statement, and throw statement) must be terminated with semicolons.&lt;/blockquote&gt;
But it doesn’t end there–JavaScript introduces what’s known as &lt;strong&gt;Automatic Semicolon Insertion (ASI)&lt;/strong&gt;. The specification continues:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.&lt;/blockquote&gt;
The general C-family rules for semicolons can be found in most teaching material for JavaScript and has been advocated by most of the prominent JavaScript personalities since 1995. In a &lt;a href=&quot;https://brendaneich.com/2012/04/the-infernal-semicolon/&quot;&gt;recent post&lt;/a&gt;, JavaScript’s inventor, Brendan Eich, described ASI as “a syntactic error correction procedure”, (as in “&lt;a href=&quot;https://brendaneich.com/2012/04/the-infernal-semicolon/#comment-12268&quot;&gt;parsing error&lt;/a&gt;”, rather than “user error”).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The rest of this article about semicolons in JavaScript can be found on &lt;a title=&quot;JavaScript and Semicolons&quot; href=&quot;http://dailyjs.com/2012/04/19/semicolons/&quot;&gt;DailyJS&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Minifying HTML in the Servlet container</title>
      <link href="https://r.va.gg/2011/11/minifying-html-in-the-servlet-container.html" />
      <updated>2011-11-23T04:38:44.000Z</updated>
      <id>https://r.va.gg/2011/11/minifying-html-in-the-servlet-container.html</id>
      <content type="html">
        &lt;p&gt;Google&#39;s &lt;a title=&quot;mod_pagespeed&quot; href=&quot;http://code.google.com/speed/page-speed/docs/module.html&quot;&gt;mod_pagespeed&lt;/a&gt; is great. I&#39;ve been using it for a while now on &lt;a title=&quot;FeedXL Horse Nutrition&quot; href=&quot;http://feedxl.com&quot;&gt;feedxl.com&lt;/a&gt; but the only filter that I actually find really useful is &lt;a href=&quot;http://code.google.com/speed/page-speed/docs/filter-whitespace-collapse.html&quot;&gt;Collapse Whitespace&lt;/a&gt;; the rest of the filters I either already do myself as part of the site build process or I don&#39;t want applied. But, I imagine that there are a lot of admins out there that would really benefit from all of the clever things it can do.&lt;/p&gt;
&lt;p&gt;Unfortunately it&#39;s just an Apache2 module so it&#39;s a bit difficult to use the cleverness elsewhere. I recently launched a new service that serves content directly from Apache Tomcat without passing through an Apache2 web server like I would normally do (because there was just no need!). Having got used to the nice whitespace optimisations you can get from mod_pagespeed I decided to implement a simple version of my own for Tomcat. Dynamic content is somewhere that you&#39;re better off trying not to optimise your whitespace during generation, leave it for post-processing so your logic can be clear.&lt;/p&gt;
&lt;p&gt;So, enter &lt;strong&gt;HTMLMinifyFilter&lt;/strong&gt;. It&#39;s nowhere near as clever as mod_pagespeed but it&#39;ll do for basic needs. The core of it is a regular expression that will remove certain patterns and it&#39;s configurable so you decide which patterns to include.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;au&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xprime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;misc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLMinifyFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResponseWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResponseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-linestart-whitespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(?&lt;=^)[ \\t]+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-lineend-whitespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[ \\t]+(?:$)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-multiple-whitespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;([ \\t](?:[ \\t]))+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strip-blank-lines&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(\\n[ \\t]*(?:\\n))+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MULTILINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appendIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;|&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseWrapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponseWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharArrayWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResponseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CharArrayWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;h3&gt;How does it work?&lt;/h3&gt;
We start off by wrapping our response in an object that will supply a CharArrayWriter so we can capture and process whatever the rest of the stack is doing (credit for this idea goes &lt;a href=&quot;http://stackoverflow.com/questions/5009650/where-can-i-find-a-java-servlet-filter-that-applies-regex-to-the-output&quot;&gt;here&lt;/a&gt;). We can then process the output with our regular expression(s) and pass it to the real response.&lt;/p&gt;
&lt;p&gt;Before I explain what the regular expressions do I want to caution that this won&#39;t be satisfactory in certain situations. It&#39;s not aware of &lt;script&gt;, &lt;pre&gt; or any other content where whitespace may be important, so unless you&#39;re sure stripping whitespace doesn&#39;t matter you may want to find a more intelligent solution.&lt;/p&gt;
&lt;p&gt;I&#39;ve split the regex up into 4 optional parts, you turn them on with init-parameters (explained later), matches of each of these are replaced with an empty string:&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;&lt;strong&gt;strip-linestart-whitespace - (?&lt;=^)[ \t]+&lt;/strong&gt;&lt;/h4&gt;
This regex will match whitespace at the beginning of any line. You&#39;ll notice that I&#39;m not using \s for my whitespace match, this is because with multi-line pattern matching it&#39;ll also match \n and \r which we want to handle separately. The (?&lt;=^) at the beginning is a non-capturing positive look-behind for &lt;em&gt;line-start&lt;/em&gt;; so it&#39;ll match the start of the line but won&#39;t include it in our returned match-group so we only strip out the whitespace.&lt;/p&gt;
&lt;p&gt;This option is likely to make the biggest impact on HTML minification on dynamic content because we love to use indentation to define structure.&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;&lt;strong&gt;&lt;/strong&gt;strip-lineend-whitespace - [ \t]+(?:$)&lt;/h4&gt;
Same deal as the linestart regex but this time we have (?:$), a non-capturing positive look-ahead for &lt;em&gt;line end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This will pick up any sloppyness in your HTML (I wish I could do this in Microsoft Word when I have to edit other people&#39;s documents, you can&#39;t see it, &lt;strong&gt;but it&#39;s still there&lt;/strong&gt;!).&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;strip-multiple-whitespace - (&lt;a href=&quot;?:[ \\t]&quot;&gt; \t&lt;/a&gt;)+&lt;/h4&gt;
Here we have a group of one or more whitespace characters followed by another whitespace character, non-captured, so we don&#39;t strip out all whitespace, remember that we are replacing matches with an empty string so we need the non-capturing second space to leave one intact.&lt;/p&gt;
&lt;p&gt;This is probably going to be the most dangerous if you might have content where whitespace is important, e.g. &lt;script&gt;, &lt;pre&gt;.l&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;strip-blank-lines - (\n[ \t]*(?:\n))+&lt;/h4&gt;
This is very similar to the multiple-whitespace regex but we match a newline, followed by zero or more whitespace characters, followed by a non-captured newline, all repeated one or more times. So we&#39;ll get rid of any lines that don&#39;t contain content.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Configuration&lt;/h3&gt;
You simply put the filter into your classpath somewhere and wire it up in web.xml. You first define the filter reference and any parameters:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&lt;filter&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;filter-name&gt;&lt;/span&gt;htmlMinifyFilter&lt;span class=&quot;nt&quot;&gt;&lt;/filter-name&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;filter-class&gt;&lt;/span&gt;au.com.xprime.misc.webapp.filter.HTMLMinifyFilter&lt;span class=&quot;nt&quot;&gt;&lt;/filter-class&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-linestart-whitespace&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-lineend-whitespace&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-multiple-whitespace&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;init-param&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-name&gt;&lt;/span&gt;strip-blank-lines&lt;span class=&quot;nt&quot;&gt;&lt;/param-name&gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&lt;param-value&gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&lt;/param-value&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;/init-param&gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&lt;/filter&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any of the parameters can be set to &lt;i&gt;false&lt;/i&gt; or omitted all together to turn it off.&lt;/p&gt;
&lt;p&gt;Then you need to wire up the filter to any incoming URIs which is done just like servlet-mapping (but still hopelessly unhelpful, why can&#39;t we have proper regular expressions for these??). You&#39;ll notice that I&#39;m only using a Writer so even though it checks for a text/html response before it does any rewriting you won&#39;t want it touching any binary data because we don&#39;t wrap getOutputStream(). So, either make sure the filter only gets applied to text/html URIs or modify the filter to be binary-safe. I only have a few URIs that I want to apply this to so I&#39;ve put them in manually with one of these per URI:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&lt;filter-mapping&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;filter-name&gt;&lt;/span&gt;htmlMinifyFilter&lt;span class=&quot;nt&quot;&gt;&lt;/filter-name&gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&lt;url-pattern&gt;&lt;/span&gt;/myuri&lt;span class=&quot;nt&quot;&gt;&lt;/url-pattern&gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&lt;/filter-mapping&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But you can also do the simple url-pattern matching with &lt;em&gt;.ext or /&lt;/em&gt;, etc.&lt;/p&gt;
&lt;p&gt;And there you go! Cheap and easy HTML minification from within the Servlet container.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Handling X-Forwarded-For in Java and Tomcat</title>
      <link href="https://r.va.gg/2011/07/handling-x-forwarded-for-in-java-and-tomcat.html" />
      <updated>2011-07-30T04:49:50.000Z</updated>
      <id>https://r.va.gg/2011/07/handling-x-forwarded-for-in-java-and-tomcat.html</id>
      <content type="html">
        &lt;p&gt;This is the first follow-up to my &lt;a title=&quot;Wrangling the X-Forwarded-For Header&quot; href=&quot;http://rod.vagg.org/2011/07/wrangling-the-x-forwarded-for-header/&quot;&gt;post on X-Forwarded-For&lt;/a&gt;, I&#39;ll assume you&#39;ve at least scanned that article.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Revision of the security issues&lt;/h3&gt;
It&#39;s important to recap the security message of my previous post. &lt;strong&gt;Don&#39;t assume that the content of the X-Forwarded-For header is either correct or syntactically valid&lt;/strong&gt;. The header is not hard to spoof and there are only certain situations where you may be able to trust parts of the content of the header.&lt;/p&gt;
&lt;p&gt;So, my simple advice is not to use this header for anything &lt;em&gt;important&lt;/em&gt;. Don&#39;t use it for authentication purposes or anything else that has security implications. It really should only be used for your own information purposes or to provide customised content for the user where it&#39;s OK to be basing that customisation on false information, because this will be a possibility.&lt;/p&gt;
&lt;p&gt;We use it on &lt;a href=&quot;http://feedxl.com/&quot;&gt;FeedXL&lt;/a&gt; for IP address geolocation using &lt;a href=&quot;http://www.maxmind.com/app/country&quot;&gt;GeoIP&lt;/a&gt; to serve country specific information to visitors. Ultimately it doesn&#39;t really matter a whole lot if we get it wrong; while there are differences in the content the differences aren&#39;t major. It may cause some confusion but that confusion can be resolved if the customer wants to contact us. You sign up to FeedXL based on your country but we still let you select your country from a list even though we pre-select the one we guess from your IP address. And if you sign up to the wrong country then you won&#39;t get access to the correct database for your country; hardly a major security issue, more of an inconvenience. If you&#39;re spoofing X-Forwarded-For then you&#39;re probably not the kind of person who&#39;s going to get confused at the content, you&#39;re probably just poking around and are not really interested in our product anyway!&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Extracting a useful IP address&lt;/h3&gt;
I ended my last post with a generalised rule for extracting the most likely useful IP address from the X-Forwarded-For header:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;&lt;em&gt;Always use the leftmost non-private address&lt;/em&gt;&lt;/strong&gt;.&lt;/blockquote&gt;
And I gave a couple of regular expressions to help with this process: &lt;code&gt;([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})&lt;/code&gt; or&lt;code&gt; (\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})&lt;/code&gt; to match an IP address. And &lt;code&gt;(^127.0.0.1)|(^10.)|(^172.1[6-9].)|(^172.2[0-9].)|(^172.3[0-1].)|(^192.168.)&lt;/code&gt;. To match a private IP address.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Java use cases&lt;/h3&gt;
In my Java code I have 2 uses for the IP address from X-Forwarded-For, both of these come up because we&#39;re working behind a load balancer (Amazon&#39;s &lt;a href=&quot;http://aws.amazon.com/elasticloadbalancing/&quot;&gt;Elastic Load Balancing&lt;/a&gt;) and don&#39;t have direct access to the remote host information:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;Looking up the country information in the GeoIP database using their Java API. Most of our use of GeoIP is with &lt;a href=&quot;http://geolite.maxmind.com/download/geoip/api/mod_geoip2/&quot;&gt;mod_geoip&lt;/a&gt; in &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache &lt;/a&gt;but we also want to occasionally use it from within a &lt;a href=&quot;http://www.oracle.com/technetwork/java/javaee/servlet/index.html&quot;&gt;servlet&lt;/a&gt;. For example, on our sign-up page we pre-select the country at the top of the page based on your IP address, this is done within Java.&lt;/li&gt;
    &lt;li&gt;More interesting logging from &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;: if I want to have &lt;a href=&quot;http://tomcat.apache.org/tomcat-6.0-doc/config/valve.html#Access_Log_Valve&quot;&gt;AccessLogValve&lt;/a&gt; turned on, the host information isn&#39;t very interesting behind a load balancer.&lt;/li&gt;
&lt;/ul&gt;
A generic parser would serve both of these purposes!&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Parsing X-Forwarded-For&lt;/h3&gt;
I have created a simple utility class to do the parsing, called from wherever I need either an &lt;strong&gt;IP address&lt;/strong&gt; or a &lt;strong&gt;hostname&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;au&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xprime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.Inet4Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.InetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.UnknownHostException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.Matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InetAddressUtil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_REGEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_REGEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(^127\\.0\\.0\\.1)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findNonPrivateIpAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDRESS_REGEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_REGEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_ADDRESS_PATTERN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIVATE_IP_ADDRESS_PATTERN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Forwarded-For&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;&amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findNonPrivateIpAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwardedFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRemoteAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHostnameFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inet4Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InetAddress&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInet4AddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnknownHostException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inet4Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(Download &lt;a href=&quot;http://src.vagg.org/java/InetAddressUtil.java&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Given an &lt;code&gt;HttpServletRequest&lt;/code&gt; we can call either &lt;code&gt;getAddressFromRequest()&lt;/code&gt; or &lt;code&gt;getHostnameFromRequest()&lt;/code&gt; to get the data we need.&lt;/p&gt;
&lt;p&gt;We first use the general IP address regular expression and on line 23 we loop through each match we find, starting from the left of the beginning of the string. This way we don&#39;t even look at the commas in the string and don&#39;t care if there are any spaces or not. We also get to avoid any nonsense data that may be in the string. If you spoof the header with a random string of characters then it&#39;ll be ignored. The code is quite strict in that it&#39;ll only bother with non-private IP addresses in the header, otherwise it will resort to the remote address of the request as a fall-back.&lt;/p&gt;
&lt;p&gt;Our hostname resolution is also prepared for failure and will return the original IP address if it can&#39;t get you a hostname.&lt;/p&gt;
&lt;p&gt;Instead of just calling &lt;code&gt;request.getRemoteAddr()&lt;/code&gt; and &lt;code&gt;request.getRemoteHost()&lt;/code&gt; from our own code, you&#39;d simply wrap them in &lt;code&gt;InetAddressUtil.getAddressFromRequest(request)&lt;/code&gt; and &lt;code&gt;InetAddressUtil.getHostnameFromRequest(request)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Extending Tomcat logging&lt;/h3&gt;
You enable request logging in Tomcat by attaching an AccessLogValve to your context or host. It mirrors the custom formatting options that you&#39;ll find in &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_log_config.html&quot;&gt;Apache&#39;s CustomLog&lt;/a&gt;. So, you can print out a &lt;strong&gt;%h&lt;/strong&gt; for the request hostname but behind a load balancer you&#39;ll just get the name or address of the load balancer that&#39;s forwarding the request. You could also just use &lt;strong&gt;%{X-Forwarded-For}i&lt;/strong&gt; to get access to the raw header value, but this will either just be an IP address or a comma separated string of IP addresses. This may be useful for your purposes but not mine, I want a hostname!&lt;/p&gt;
&lt;p&gt;Unfortunately, AccessLogValve doesn&#39;t lend itself to easy extension, there are two &lt;code&gt;createAccessLogElement()&lt;/code&gt; methods that you&#39;d ideally be able to overwrite in your own subclass and return a new custom &lt;code&gt;AccessLogElement&lt;/code&gt; for the character you&#39;ve chosen to represent your log element.&lt;/p&gt;
&lt;p&gt;The best we can do is overwrite the protected &lt;code&gt;createLogElements&lt;/code&gt; and copy the functionality from there and extend with our own. However, in my extension of AccessLogValve I&#39;ve assumed that the Tomcat boys will eventually &lt;a href=&quot;https://issues.apache.org/bugzilla/show_bug.cgi?id=51588&quot;&gt;fix&lt;/a&gt; the access modifiers for the &lt;code&gt;createLogElement()&lt;/code&gt; methods so I&#39;ve just copied the whole class, named it &lt;code&gt;AccessLogValve&lt;em&gt;&lt;/code&gt; and changed the modifiers myself. The plan being to remove this in the future and take the &lt;/em&gt; of the extended class name in my code.&lt;/p&gt;
&lt;p&gt;Here&#39;s my extended AccessLogValve&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;au&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xprime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;catalina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.catalina.connector.Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.catalina.connector.Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;au.com.xprime.webapp.util.InetAddressUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLogValve&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;catalina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AccessLogValve_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardedForAddrElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessLogElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InetAddressUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAddressFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardedForHostElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ForwardedForAddrElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InetAddressUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHostnameFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessLogElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createAccessLogElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AccessLogElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessLogElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createAccessLogElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessLogElement&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;f&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardedForAddrElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;F&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardedForHostElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessLogElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(Download &lt;a href=&quot;http://src.vagg.org/java/AccessLogValve.java&quot;&gt;here&lt;/a&gt; and AccessLogValve&lt;em&gt; &lt;a href=&quot;&lt;a href=&quot;http://src.vagg.org/java/AccessLogValve&quot;&gt;http://src.vagg.org/java/AccessLogValve&lt;/a&gt;&lt;/em&gt;.java&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Which gives me &lt;strong&gt;%f&lt;/strong&gt; for the X-Forwarded-For IP address and %F for the X-Forwarded-For address. My valve pattern looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code style=&quot;padding-left: 30px;&quot;&gt;pattern=&quot;%F %f %h %l %u %t %r&quot; %s %b &quot;%{Referer}i&quot; &quot;%{User-Agent}i&quot;&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Simply compile, place together in a JAR, put it in your Tomcat lib directory then make sure you use the right class name when building your AccessLogValve descriptor. The lazy can find a JAR (including source) &lt;a href=&quot;http://src.vagg.org/java/xprime_accesslogvalve.jar&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next I&#39;ll be getting dirty with C and hack mod_geoip to do something similar.&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Wrangling the X-Forwarded-For Header</title>
      <link href="https://r.va.gg/2011/07/wrangling-the-x-forwarded-for-header.html" />
      <updated>2011-07-29T06:15:36.000Z</updated>
      <id>https://r.va.gg/2011/07/wrangling-the-x-forwarded-for-header.html</id>
      <content type="html">
        &lt;p&gt;Until recently, we&#39;ve served pages directly from the server for &lt;a title=&quot;FeedXL D. I. Y. Horse Nutrition&quot; href=&quot;http://feedxl.com/&quot;&gt;FeedXL.com&lt;/a&gt; but we&#39;ve since moved to a load balancing situation with multiple servers behind a load balancer.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;&lt;strong&gt;AWS &amp; ELB&lt;/strong&gt;&lt;/h3&gt;
We use &lt;a title=&quot;Amazon Web Services&quot; href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt; to host FeedXL and are now using their &lt;strong&gt;&lt;a title=&quot;AWS Elastic Load Balancing&quot; href=&quot;http://aws.amazon.com/elasticloadbalancing/&quot;&gt;Elastic Load Balancing&lt;/a&gt; (ELB)&lt;/strong&gt; service to spread the load across 3 &lt;em&gt;Availability Zones&lt;/em&gt; in the main datacentre we operate from. We&#39;re doing this primarily for high availability purposes rather than to handle heavy load but the added benefit is that it lets us scale up really easily if we have any sudden spikes in our traffic. We&#39;re using some small instances at the front using &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; to handle the main traffic. The dynamic content is passed on to larger back-end instances running our webapp in &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A couple of our important &lt;a href=&quot;http://aws.amazon.com/ebs/&quot;&gt;EBS&lt;/a&gt; volumes were among the last to be restored during &lt;a href=&quot;http://alestic.com/2011/04/ec2-outage&quot;&gt;Judgement Day&lt;/a&gt;, April 2011 and while we had regular snapshots we hesitated for too long before rebuilding our service in a different Availability Zone (or Region), partly because of lack of clear information about the outage from Amazon (we were continually given the impression that it wouldn&#39;t be long before things were back online, so why not wait just a tiny bit longer to restore to normal service than restore from slightly older snapshots?). Probably like many AWS customers impacted by the outage, we&#39;ve increased our spend to boost our redundancy to better handler outages of this kind. We now span multiple Availability Zones and have increased the quality of our off-Region backups. I&#39;m pretty sure that in the end Amazon has ended up doing very well from their rather embarrassing incident with many customers keen to avoid their own embarrassment the next time it happens.&lt;/p&gt;
&lt;p&gt;However, switching to ELB hasn&#39;t been without hiccups.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;GeoIP&lt;/h3&gt;
We rely very heavily on &lt;a href=&quot;http://www.maxmind.com/app/country&quot;&gt;GeoIP&lt;/a&gt; from MaxMind to serve content customised to each country. We have a large amount of functionality built right in to our Apache configuration that uses both &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html&quot;&gt;rewrites&lt;/a&gt; and &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_include.html&quot;&gt;SSI&lt;/a&gt; to make our static content relatively dynamic. We even do spelling correction for UK/US English depending on where you view our site from! The main reason we customise content though is because FeedXL is a different product for each country. We have to maintain country specific feeds databases and we also mostly deal with local currencies so our price details change a little depending on where you are. We&#39;ve had a very good experience with GeoIP with only a few mismatches reported by customers and they&#39;ve always been corporate networks where traffic is routed internationally (Australia-&gt;USA or NZ-&gt;AU for example) or satellite connections without a likely country of origin.&lt;/p&gt;
&lt;p&gt;The way that &lt;a href=&quot;http://geolite.maxmind.com/download/geoip/api/mod_geoip2/&quot;&gt;mod_geoip&lt;/a&gt; for Apache works is that it takes the request IP address and looks it up in its database to find the (most likely) country of origin, you then get environment variables in your Apache request: GEOIP_COUNTRY_CODE &amp; GEOIP_COUNTRY_NAME. You can use these with mod_rewrite to do all sorts of crazy things, plus mod_include lets you do more straightforward things with your content. For example, if we want to make a North America specific announcement we might wrap our announcement block in &lt;code&gt;&lt;!--#if expr=&#39;&quot;$GEOIP_COUNTRY_CODE&quot; = &quot;US&quot; || &quot;$GEOIP_COUNTRY_CODE&quot; = &quot;CA&quot;&#39; --&gt; &lt;em&gt;... content ... &lt;/em&gt;&lt;!--#endif --&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, one of the most important catches of load balancing is that your requests come to your web server from the load balancer itself and not the original client, so you don&#39;t get the raw IP address of the client built into your request. Instead, with ELB and most other load balancers you need to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/X-Forwarded-For&quot;&gt;&lt;strong&gt;X-Forwarded-For&lt;/strong&gt; &lt;/a&gt;HTTP header.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;X-Forwarded-For&lt;/h3&gt;
The X-Forwarded-For header was first introduced by &lt;a href=&quot;http://www.squid-cache.org/&quot;&gt;Squid&lt;/a&gt; as a means of passing on the IP address of the client to the server. It has since been widely adopted by other proxy servers and load balancers so it&#39;s pretty much considered a &lt;em&gt;standard&lt;/em&gt; even if it technically isn&#39;t.&lt;/p&gt;
&lt;p&gt;What you are supposed to get as your header is this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: clientIP, server1IP, server2IP, server3IP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The client IP address should be first, followed by first proxy server, followed by any other servers in a comma separated list. The final server that passes the request on to you won&#39;t be in the list, &lt;span style=&quot;text-decoration: underline;&quot;&gt;a proxy server or load balancer will only append the address of server it received the request from if the X-Forwarded-For header was passed to it&lt;/span&gt; otherwise it just constructs a new X-Forwarded-For with just the client address in it. The address of the last server in the complete &lt;em&gt;chain&lt;/em&gt; is simply the address of the client making the request to your server. But as usual in the web world there are no guarantees.&lt;/p&gt;
&lt;p&gt;Apache kindly gives you an HTTP_X_FORWARDED_FOR environment variable (although I can&#39;t find official documentation on this so I&#39;m not sure of the specifics of what conditions may prevent you from getting this variable). You could use this in custom modules or standard modules that use environment variables such as mod_rewrite. If you want to log with it then you could configure your &lt;code&gt;LogFormat&lt;/code&gt; to print it out with &lt;code&gt;%{X-Forwarded-For}i&lt;/code&gt; to make your logs more interesting than just showing the load balancer hostname as &lt;code&gt;%h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;mod_geoip has a configuration switch, &lt;code&gt;GeoIPScanProxyHeaders On&lt;/code&gt; that tells it to use X-Forwarded-For (or HTTP_X_FORWARDED_FOR) to determine the client IP address rather than just the remote address.&lt;/p&gt;
&lt;p&gt;There are some important catches to consider before you proceed to use this header to do anything interesting:&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;
    &lt;li&gt;Most importantly, headers can be crafted by anyone, &lt;strong&gt;never trust a header value unless you are certain that it can&#39;t be spoofed&lt;/strong&gt;. I&#39;d actually just simplify that to just &lt;em&gt;never trust a header value&lt;/em&gt;. So if you are going to use it then don&#39;t use it for anything that has security implications.&lt;/li&gt;
    &lt;li&gt;The client IP address that you get from the first entry may not actually be the address that you want. Most of the time the requests will probably come directly from the browser of your visitor but what if they are behind a proxy server within a private network themselves? The IP address you may end up with could be something like 10.1.34.121 which is of no value because it only tells you that they are sitting on a private network &lt;em&gt;somewhere&lt;/em&gt; in the world.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Security Implications&lt;/h3&gt;
This is pretty straightforward. If you&#39;re in the situation of handling traffic behind a load balancer then you may be able to guarantee that your traffic comes from the load balancer so the header is constructed by it, but consider the situation where X-Forwarded-For contains a chain of addresses, potentially from untrusted sources. If the header contains at least one &lt;em&gt;server&lt;/em&gt; IP address then the &lt;em&gt;client&lt;/em&gt; IP address will have been passed on by the upstream server with no way for your load balancer to verify its correctness; all it&#39;s doing is adding the address of the requesting host onto the end of the list.&lt;/p&gt;
&lt;p&gt;There&#39;s also the possibility of direct connections to your web server(s). Are your servers walled off from the outside world with only the load balancer able to communicate with it? Is there a possibility that a client can make a direct connection to your server and construct its own X-Forwarded-For header? On AWS, all standard instances have a public IP address but you can set up your &lt;a href=&quot;http://docs.amazonwebservices.com/AWSEC2/2007-08-29/DeveloperGuide/distributed-firewall-concepts.html&quot;&gt;security groups &lt;/a&gt;to only allow access to port 80 from your load balancer. This is probably a good idea for many reasons.&lt;/p&gt;
&lt;p&gt;Basically, I would suggest working on the assumption that X-Forwarded-For is only &lt;em&gt;likely&lt;/em&gt; to be correct, nothing more.&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Best Guess IP Address&lt;/h3&gt;
When using X-Forwarded-For, the assumption normally made is that the first IP address in the list is the client address that you can use to do interesting things with, like IP address geolocation (à la GeoIP). But what about &lt;a href=&quot;http://en.wikipedia.org/wiki/Private_network&quot;&gt;private addresses&lt;/a&gt;? What about the casual browser at McDonalds using their WiFi with a 10.x.x.x address or a company network with a 192.168.x.x internal address structure? You&#39;ll end up with a very unhelpful address that&#39;ll tell you nothing very interesting about the client.&lt;/p&gt;
&lt;p&gt;There are 3 sets of address ranges in &lt;a href=&quot;http://en.wikipedia.org/wiki/IPv4&quot;&gt;IPv4&lt;/a&gt; (lets ignore &lt;a href=&quot;http://en.wikipedia.org/wiki/IPv6&quot;&gt;IPv6&lt;/a&gt; for now) that are reserved for private networks. Normally these are hidden behind &lt;a href=&quot;http://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt; gateways and often traffic is forced to either manually or automatically route through a proxy server of some kind. The address ranges are:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;10.0.0.0 – 10.255.255.255&lt;/li&gt;
    &lt;li&gt;172.16.0.0 – 172.31.255.255&lt;/li&gt;
    &lt;li&gt;192.168.0.0 – 192.168.255.255&lt;/li&gt;
&lt;/ul&gt;
You can thank these beauties for extending the life of IPv4 way beyond what it would otherwise have been.&lt;/p&gt;
&lt;p&gt;If you have a client behind one of these networks and it&#39;s not routed through a proxy server then you&#39;ll probably just get the IP address of the NAT gateway which is likely to be the address you want to use. If the request is routed through a proxy server then you may get an X-Forwarded-For that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: 10.208.4.38, 58.163.175.187
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the address you probably want is actually the (proxy) server address on the end rather than the private client address.&lt;/p&gt;
&lt;p&gt;You may also have a chain of multiple servers, perhaps you have a downstream proxy server going through a larger upstream one before heading out of the network, so you may get something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: 10.208.4.38, 58.163.1.4, 58.163.175.187
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, the downstream proxy server could be within the private network, perhaps a departmental proxy server connecting to a company-wide proxy server and then this may happen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Forwarded-For: 10.208.4.38, 10.10.300.23, 58.163.175.187
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This could of course be even more complex as you may have a longer chain of proxy servers (although I&#39;ve never actually seen anyone chain more than 2 layers of proxy servers together in a network before).&lt;/p&gt;
&lt;p&gt;So what general rule should we construct for extracting our usable client IP from these addresses?&lt;/p&gt;
&lt;p&gt;Of course, I&#39;m suggesting that the rule: &lt;strong&gt;&lt;em&gt;always use the leftmost address&lt;/em&gt;&lt;/strong&gt; is not correct as there is a good chance it may be a private IP address if there is more than 1 address in the list. Unfortunately this is the rule that mod_geoip adopts, if it finds a comma it just chops off the string at that comma. We immediately found this led to unsatisfactory results with ELB as we had more requests than we expected originating from private networks routed through proxy servers; and we heard about it in the form of error reports from our users (&lt;em&gt;&quot;where&#39;s the log in link?&quot;&lt;/em&gt;--it&#39;s not normally displayed in countries where we haven&#39;t released FeedXL).&lt;/p&gt;
&lt;p&gt;An alternative would be &lt;strong&gt;&lt;em&gt;always use the rightmost address&lt;/em&gt;&lt;/strong&gt; which would probably get you a pretty good guess in almost all cases. If there is more than one IP address in the list then the rightmost address will probably be the address where the request left whatever corporate or internal network the client was hidden behind, even if there are multiple layers. However, multiple layers of IP addresses suggests a fairly large network, possibly widely disbursed. There&#39;s also a chance that you have one proxy server piggybacking off a higher capacity upstream proxy server: for example, some ISPs run their own very large proxy servers that customers can use and may make ideal upstream connections for internal proxy servers with caching at both levels. The ISP proxy server is likely to be located in a very different place to the client though and if you&#39;re trying to pin down the IP address of the client using something like &lt;a href=&quot;http://www.maxmind.com/app/city&quot;&gt;GeoIP City&lt;/a&gt; then you&#39;ll probably get the wrong city.&lt;/p&gt;
&lt;p&gt;So, here&#39;s the rule that I suggest would be the best general case rule to allow you to extract the address most likely to be physically close to the real client:&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;&lt;em&gt;Always use the leftmost &lt;span style=&quot;text-decoration: underline;&quot;&gt;non-private&lt;/span&gt; address&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
We can do this because the rules are clear about what is and what is not a private IP address (see above).&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Doing It the Regular Expression Way&lt;/h3&gt;
First, remember that the X-Forwarded-For header is not very trustworthy. You don&#39;t want to even assume that it contains IP addresses! So, before you even check if an entry is a private IP address or not you should probably simply check if it&#39;s an IP address.&lt;/p&gt;
&lt;p&gt;Here&#39;s a simple regular expression to match an IP address: &lt;code&gt;([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})&lt;/code&gt; or alternatively, if you&#39;re working in an environment that supports \d then this will do the same thing: &lt;code&gt;(\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})&lt;/code&gt; (with or without the parentheses but as you&#39;ll see, they are useful for the next step).&lt;/p&gt;
&lt;p&gt;Then you&#39;ll want to check if an IP address is private or not, here&#39;s a regular expression that&#39;ll do that for you, given a valid IP address: &lt;code&gt;(^127.0.0.1)|(^10.)|(^172.1[6-9].)|(^172.2[0-9].)|(^172.3[0-1].)|(^192.168.)&lt;/code&gt;. This matches all of the addresses matched in the ranges above and 127.0.0.1 as a bonus (quite possible in our chain!).&lt;/p&gt;
&lt;p&gt;So a general algorithm could be something like this: walk through the string starting from the first match of our general IP address regular expression through to the last. For each match, check if the matched component matches our private IP address regular expression, if it does then proceed to the next address in the list, if it doesn&#39;t match then we have the IP address we want. If we get to the end of the list without finding an IP address that isn&#39;t private then we have to have some kind of generic fall-back.&lt;/p&gt;
&lt;p&gt;Exactly what your fall-back might be depends on your environment and whether your trust the server passing you the request or not. In the case of ELB, if it&#39;s working properly we should never need the fall-back case. For FeedXL our fall-back for any failure during the GeoIP process is to just assume that they are coming from the country where most of our customers are from (currently Australia).&lt;/p&gt;
&lt;p&gt;I have 2 follow-up posts to make after this one, first I&#39;ll show how I deal with X-Forwarded-For in both Tomcat and our own Java software, then I&#39;ll show how I&#39;ve hacked mod_geoip to use the algorithm outlined above with excellent results.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Follow-up #1: &lt;a title=&quot;Permanent Link to Handling X-Forwarded-For in Java and Tomcat&quot; href=&quot;http://rod.vagg.org/2011/07/handling-x-forwarded-for-in-java-and-tomcat/&quot; rel=&quot;bookmark&quot;&gt;Handling X-Forwarded-For in Java and Tomcat&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Follow-up #2: &lt;a title=&quot;A mod_geoip2 that properly handles X-Forwarded-For&quot; href=&quot;http://rod.vagg.org/2012/04/a-mod_geoip2-that-properly-handles-x-forwarded-for/&quot;&gt;&lt;strong&gt;&lt;em&gt;A mod_geoip2 that properly handles X-Forwarded-For&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Update July 30th 2011&lt;/h3&gt;
I&#39;ve just stumbled upon &lt;a title=&quot;X-Forwarded-For Spoofer&quot; href=&quot;https://addons.mozilla.org/en-US/firefox/addon/x-forwarded-for-spoofer/&quot;&gt;this&lt;/a&gt;, an &quot;X-Forwarded-For Spoofer&quot; Add-On for Firefox and I love the description, sums up the security concerns:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;em&gt;Some clients add X-Forwarded-For to HTTP requests in an attempt to help servers identify the originating IP address of a request. Some clients, however, can set X-Forwarded-For to any arbitrary value. Some servers assume X-Forwarded-For is unassailable. No server should.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With this add-on, you can assign an arbitrary IP address to the X-Forwarded-For field, attempt to perform XSS by including HTML in this field, or even attempt SQL injection.&lt;/em&gt;&lt;/blockquote&gt;
May be useful for testing and debugging your web application.&lt;/p&gt;

      </content>
    </entry>
  

 </feed>
